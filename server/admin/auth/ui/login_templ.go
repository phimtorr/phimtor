// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.680
package ui

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "html/template"

type FirebaseConfig struct {
	APIKey            string
	ProjectID         string
	MessagingSenderID string
	AppID             string
	MeasurementID     string
}

var firebaseTemplate = template.Must(template.New("firebase").Parse(`
    <script type="module">
        // Import the functions you need from the SDKs you need
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.10.0/firebase-app.js";
        import { getAnalytics } from "https://www.gstatic.com/firebasejs/10.10.0/firebase-analytics.js";
        // TODO: Add SDKs for Firebase products that you want to use
        // https://firebase.google.com/docs/web/setup#available-libraries
        import { 
            getAuth,
            signInWithEmailAndPassword,
            inMemoryPersistence,
        } from 'https://www.gstatic.com/firebasejs/10.10.0/firebase-auth.js';

        // Your web app's Firebase configuration
        // For Firebase JS SDK v7.20.0 and later, measurementId is optional
        const firebaseConfig = {
            apiKey: "{{ .APIKey }}",
            authDomain: "{{ .ProjectID }}.firebaseapp.com",
            projectId: "{{ .ProjectID }}",
            storageBucket: "{{ .ProjectID }}.appspot.com",
            messagingSenderId: "{{ .MessagingSenderID }}",
            appId: "{{ .AppID }}",
            measurementId: "{{ .MeasurementID }}"
        };

        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const analytics = getAnalytics(app);
        const auth = getAuth(app);

        // As httpOnly cookies are to be used, do not persist any state client side.
        auth.setPersistence(inMemoryPersistence);

        window.auth = auth;
        window.signInWithEmailAndPassword = signInWithEmailAndPassword;
        
    </script>

`))

func LoginPage(config FirebaseConfig) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"><meta name=\"color-scheme\" content=\"light dark\"><link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css\"><title>Login Page</title></head><body>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.FromGoHTML(firebaseTemplate, config).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<main class=\"container\"><article><h2>Login</h2><form><div class=\"form-group\"><label for=\"email\">Email</label> <input type=\"text\" id=\"email\" name=\"email\" placeholder=\"Enter your email\"></div><div class=\"form-group\"><label for=\"password\">Password</label> <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Enter your password\"></div><div style=\"color: red;\"><p id=\"errorMessage\" style=\"color: red;\"></p></div><!-- Error message element --><div class=\"form-group\"><button type=\"submit\">Login</button></div></form></article></main><script>\n                const form = document.querySelector('form');\n                const errorMessage = document.getElementById('errorMessage'); // Get the error message element\n\n                form.addEventListener('submit', async (event) => {\n                    event.preventDefault();\n                    const email = form.email.value;\n                    const password = form.password.value;\n                    window.signInWithEmailAndPassword(window.auth, email, password)\n                        .then((userCredential) => {\n                            // Get the user's ID token as it is needed to exchange for a session cookie.\n                            return userCredential.user.getIdToken().then(idToken => {\n                                // Submit the ID token for exchanging a session cookie\n                                fetch('/sessionLogin', {\n                                    method: 'POST',\n                                     headers: {\n                                        //   \"Content-Type\": \"application/json\",\n                                        'Content-Type': 'application/x-www-form-urlencoded',\n                                    },\n                                    body: new URLSearchParams({\n                                        'idToken': idToken\n                                    }),\n                                })\n                                    .then(response => {\n                                        if (response.ok) {\n                                            // Redirect to the home page or perform any other action\n                                            window.location.href = '/';\n                                        } else {\n                                            throw new Error('Failed to exchange token');\n                                        }\n                                    })\n                                    .catch(error => {\n                                        console.error(error);\n                                        errorMessage.textContent = 'Failed to login'; // Update the error message element with a generic error message\n                                    });\n                                console.log(idToken);\n                            });\n                        })\n                        .catch((error) => {\n                            const errCode = error.code;\n                            const errMessage = error.message;\n                            console.log(errCode, errMessage);\n                            errorMessage.innerHTML = errMessage; // Update the error message element with the error message\n                            alert(errMessage);\n                        });\n                });\n            </script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
