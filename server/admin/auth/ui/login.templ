package ui 

import "html/template"

type FirebaseConfig struct {
	APIKey            string
	ProjectID         string
	MessagingSenderID string
	AppID             string
	MeasurementID     string
}

var firebaseTemplate = template.Must(template.New("firebase").Parse(`
    <script type="module">
        // Import the functions you need from the SDKs you need
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.10.0/firebase-app.js";
        import { getAnalytics } from "https://www.gstatic.com/firebasejs/10.10.0/firebase-analytics.js";
        // TODO: Add SDKs for Firebase products that you want to use
        // https://firebase.google.com/docs/web/setup#available-libraries
        import { 
            getAuth,
            signInWithEmailAndPassword,
            inMemoryPersistence,
        } from 'https://www.gstatic.com/firebasejs/10.10.0/firebase-auth.js';

        // Your web app's Firebase configuration
        // For Firebase JS SDK v7.20.0 and later, measurementId is optional
        const firebaseConfig = {
            apiKey: "{{ .APIKey }}",
            authDomain: "{{ .ProjectID }}.firebaseapp.com",
            projectId: "{{ .ProjectID }}",
            storageBucket: "{{ .ProjectID }}.appspot.com",
            messagingSenderId: "{{ .MessagingSenderID }}",
            appId: "{{ .AppID }}",
            measurementId: "{{ .MeasurementID }}"
        };

        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const analytics = getAnalytics(app);
        const auth = getAuth(app);

        // As httpOnly cookies are to be used, do not persist any state client side.
        auth.setPersistence(inMemoryPersistence);

        window.auth = auth;
        window.signInWithEmailAndPassword = signInWithEmailAndPassword;
        
    </script>

`))

templ LoginPage(config FirebaseConfig) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<meta name="color-scheme" content="light dark"/>
			<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css"/>
			<title>Login Page</title>
		</head>
		<body>
			@templ.FromGoHTML(firebaseTemplate, config)
			<main class="container">
				<article>
					<h2>Login</h2>
					<form>
						<div class="form-group">
							<label for="email">Email</label>
							<input type="text" id="email" name="email" placeholder="Enter your email"/>
						</div>
						<div class="form-group">
							<label for="password">Password</label>
							<input type="password" id="password" name="password" placeholder="Enter your password"/>
						</div>
						<div style="color: red;">
							<p id="errorMessage" style="color: red;"></p>
						</div> <!-- Error message element -->
						<div class="form-group">
							<button type="submit">Login</button>
						</div>
					</form>
				</article>
			</main>
			<script>
                const form = document.querySelector('form');
                const errorMessage = document.getElementById('errorMessage'); // Get the error message element

                form.addEventListener('submit', async (event) => {
                    event.preventDefault();
                    const email = form.email.value;
                    const password = form.password.value;
                    window.signInWithEmailAndPassword(window.auth, email, password)
                        .then((userCredential) => {
                            // Get the user's ID token as it is needed to exchange for a session cookie.
                            return userCredential.user.getIdToken().then(idToken => {
                                // Submit the ID token for exchanging a session cookie
                                fetch('/sessionLogin', {
                                    method: 'POST',
                                     headers: {
                                        //   "Content-Type": "application/json",
                                        'Content-Type': 'application/x-www-form-urlencoded',
                                    },
                                    body: new URLSearchParams({
                                        'idToken': idToken
                                    }),
                                })
                                    .then(response => {
                                        if (response.ok) {
                                            // Redirect to the home page or perform any other action
                                            window.location.href = '/';
                                        } else {
                                            throw new Error('Failed to exchange token');
                                        }
                                    })
                                    .catch(error => {
                                        console.error(error);
                                        errorMessage.textContent = 'Failed to login'; // Update the error message element with a generic error message
                                    });
                                console.log(idToken);
                            });
                        })
                        .catch((error) => {
                            const errCode = error.code;
                            const errMessage = error.message;
                            console.log(errCode, errMessage);
                            errorMessage.innerHTML = errMessage; // Update the error message element with the error message
                            alert(errMessage);
                        });
                });
            </script>
		</body>
	</html>
}
