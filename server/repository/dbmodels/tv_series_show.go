// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// TVSeriesShow is an object representing the database table.
type TVSeriesShow struct {
	ID               int64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name             string     `boil:"name" json:"name" toml:"name" yaml:"name"`
	OriginalName     string     `boil:"original_name" json:"original_name" toml:"original_name" yaml:"original_name"`
	Status           string     `boil:"status" json:"status" toml:"status" yaml:"status"`
	Tagline          string     `boil:"tagline" json:"tagline" toml:"tagline" yaml:"tagline"`
	Genres           types.JSON `boil:"genres" json:"genres" toml:"genres" yaml:"genres"`
	Overview         string     `boil:"overview" json:"overview" toml:"overview" yaml:"overview"`
	PosterPath       string     `boil:"poster_path" json:"poster_path" toml:"poster_path" yaml:"poster_path"`
	BackdropPath     string     `boil:"backdrop_path" json:"backdrop_path" toml:"backdrop_path" yaml:"backdrop_path"`
	FirstAirDate     null.Time  `boil:"first_air_date" json:"first_air_date,omitempty" toml:"first_air_date" yaml:"first_air_date,omitempty"`
	LastAirDate      null.Time  `boil:"last_air_date" json:"last_air_date,omitempty" toml:"last_air_date" yaml:"last_air_date,omitempty"`
	VoteAverage      float32    `boil:"vote_average" json:"vote_average" toml:"vote_average" yaml:"vote_average"`
	VoteCount        int        `boil:"vote_count" json:"vote_count" toml:"vote_count" yaml:"vote_count"`
	NumberOfEpisodes int        `boil:"number_of_episodes" json:"number_of_episodes" toml:"number_of_episodes" yaml:"number_of_episodes"`
	NumberOfSeasons  int        `boil:"number_of_seasons" json:"number_of_seasons" toml:"number_of_seasons" yaml:"number_of_seasons"`
	CreatedAt        time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *tvSeriesShowR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tvSeriesShowL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TVSeriesShowColumns = struct {
	ID               string
	Name             string
	OriginalName     string
	Status           string
	Tagline          string
	Genres           string
	Overview         string
	PosterPath       string
	BackdropPath     string
	FirstAirDate     string
	LastAirDate      string
	VoteAverage      string
	VoteCount        string
	NumberOfEpisodes string
	NumberOfSeasons  string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "id",
	Name:             "name",
	OriginalName:     "original_name",
	Status:           "status",
	Tagline:          "tagline",
	Genres:           "genres",
	Overview:         "overview",
	PosterPath:       "poster_path",
	BackdropPath:     "backdrop_path",
	FirstAirDate:     "first_air_date",
	LastAirDate:      "last_air_date",
	VoteAverage:      "vote_average",
	VoteCount:        "vote_count",
	NumberOfEpisodes: "number_of_episodes",
	NumberOfSeasons:  "number_of_seasons",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

var TVSeriesShowTableColumns = struct {
	ID               string
	Name             string
	OriginalName     string
	Status           string
	Tagline          string
	Genres           string
	Overview         string
	PosterPath       string
	BackdropPath     string
	FirstAirDate     string
	LastAirDate      string
	VoteAverage      string
	VoteCount        string
	NumberOfEpisodes string
	NumberOfSeasons  string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "tv_series_show.id",
	Name:             "tv_series_show.name",
	OriginalName:     "tv_series_show.original_name",
	Status:           "tv_series_show.status",
	Tagline:          "tv_series_show.tagline",
	Genres:           "tv_series_show.genres",
	Overview:         "tv_series_show.overview",
	PosterPath:       "tv_series_show.poster_path",
	BackdropPath:     "tv_series_show.backdrop_path",
	FirstAirDate:     "tv_series_show.first_air_date",
	LastAirDate:      "tv_series_show.last_air_date",
	VoteAverage:      "tv_series_show.vote_average",
	VoteCount:        "tv_series_show.vote_count",
	NumberOfEpisodes: "tv_series_show.number_of_episodes",
	NumberOfSeasons:  "tv_series_show.number_of_seasons",
	CreatedAt:        "tv_series_show.created_at",
	UpdatedAt:        "tv_series_show.updated_at",
}

// Generated where

var TVSeriesShowWhere = struct {
	ID               whereHelperint64
	Name             whereHelperstring
	OriginalName     whereHelperstring
	Status           whereHelperstring
	Tagline          whereHelperstring
	Genres           whereHelpertypes_JSON
	Overview         whereHelperstring
	PosterPath       whereHelperstring
	BackdropPath     whereHelperstring
	FirstAirDate     whereHelpernull_Time
	LastAirDate      whereHelpernull_Time
	VoteAverage      whereHelperfloat32
	VoteCount        whereHelperint
	NumberOfEpisodes whereHelperint
	NumberOfSeasons  whereHelperint
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
}{
	ID:               whereHelperint64{field: "`tv_series_show`.`id`"},
	Name:             whereHelperstring{field: "`tv_series_show`.`name`"},
	OriginalName:     whereHelperstring{field: "`tv_series_show`.`original_name`"},
	Status:           whereHelperstring{field: "`tv_series_show`.`status`"},
	Tagline:          whereHelperstring{field: "`tv_series_show`.`tagline`"},
	Genres:           whereHelpertypes_JSON{field: "`tv_series_show`.`genres`"},
	Overview:         whereHelperstring{field: "`tv_series_show`.`overview`"},
	PosterPath:       whereHelperstring{field: "`tv_series_show`.`poster_path`"},
	BackdropPath:     whereHelperstring{field: "`tv_series_show`.`backdrop_path`"},
	FirstAirDate:     whereHelpernull_Time{field: "`tv_series_show`.`first_air_date`"},
	LastAirDate:      whereHelpernull_Time{field: "`tv_series_show`.`last_air_date`"},
	VoteAverage:      whereHelperfloat32{field: "`tv_series_show`.`vote_average`"},
	VoteCount:        whereHelperint{field: "`tv_series_show`.`vote_count`"},
	NumberOfEpisodes: whereHelperint{field: "`tv_series_show`.`number_of_episodes`"},
	NumberOfSeasons:  whereHelperint{field: "`tv_series_show`.`number_of_seasons`"},
	CreatedAt:        whereHelpertime_Time{field: "`tv_series_show`.`created_at`"},
	UpdatedAt:        whereHelpertime_Time{field: "`tv_series_show`.`updated_at`"},
}

// TVSeriesShowRels is where relationship names are stored.
var TVSeriesShowRels = struct {
	ShowTVSeasons string
}{
	ShowTVSeasons: "ShowTVSeasons",
}

// tvSeriesShowR is where relationships are stored.
type tvSeriesShowR struct {
	ShowTVSeasons TVSeasonSlice `boil:"ShowTVSeasons" json:"ShowTVSeasons" toml:"ShowTVSeasons" yaml:"ShowTVSeasons"`
}

// NewStruct creates a new relationship struct
func (*tvSeriesShowR) NewStruct() *tvSeriesShowR {
	return &tvSeriesShowR{}
}

func (r *tvSeriesShowR) GetShowTVSeasons() TVSeasonSlice {
	if r == nil {
		return nil
	}
	return r.ShowTVSeasons
}

// tvSeriesShowL is where Load methods for each relationship are stored.
type tvSeriesShowL struct{}

var (
	tvSeriesShowAllColumns            = []string{"id", "name", "original_name", "status", "tagline", "genres", "overview", "poster_path", "backdrop_path", "first_air_date", "last_air_date", "vote_average", "vote_count", "number_of_episodes", "number_of_seasons", "created_at", "updated_at"}
	tvSeriesShowColumnsWithoutDefault = []string{"id", "name", "original_name", "status", "tagline", "genres", "overview", "poster_path", "backdrop_path", "first_air_date", "last_air_date", "vote_average", "vote_count", "number_of_episodes", "number_of_seasons"}
	tvSeriesShowColumnsWithDefault    = []string{"created_at", "updated_at"}
	tvSeriesShowPrimaryKeyColumns     = []string{"id"}
	tvSeriesShowGeneratedColumns      = []string{}
)

type (
	// TVSeriesShowSlice is an alias for a slice of pointers to TVSeriesShow.
	// This should almost always be used instead of []TVSeriesShow.
	TVSeriesShowSlice []*TVSeriesShow
	// TVSeriesShowHook is the signature for custom TVSeriesShow hook methods
	TVSeriesShowHook func(context.Context, boil.ContextExecutor, *TVSeriesShow) error

	tvSeriesShowQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tvSeriesShowType                 = reflect.TypeOf(&TVSeriesShow{})
	tvSeriesShowMapping              = queries.MakeStructMapping(tvSeriesShowType)
	tvSeriesShowPrimaryKeyMapping, _ = queries.BindMapping(tvSeriesShowType, tvSeriesShowMapping, tvSeriesShowPrimaryKeyColumns)
	tvSeriesShowInsertCacheMut       sync.RWMutex
	tvSeriesShowInsertCache          = make(map[string]insertCache)
	tvSeriesShowUpdateCacheMut       sync.RWMutex
	tvSeriesShowUpdateCache          = make(map[string]updateCache)
	tvSeriesShowUpsertCacheMut       sync.RWMutex
	tvSeriesShowUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tvSeriesShowAfterSelectMu sync.Mutex
var tvSeriesShowAfterSelectHooks []TVSeriesShowHook

var tvSeriesShowBeforeInsertMu sync.Mutex
var tvSeriesShowBeforeInsertHooks []TVSeriesShowHook
var tvSeriesShowAfterInsertMu sync.Mutex
var tvSeriesShowAfterInsertHooks []TVSeriesShowHook

var tvSeriesShowBeforeUpdateMu sync.Mutex
var tvSeriesShowBeforeUpdateHooks []TVSeriesShowHook
var tvSeriesShowAfterUpdateMu sync.Mutex
var tvSeriesShowAfterUpdateHooks []TVSeriesShowHook

var tvSeriesShowBeforeDeleteMu sync.Mutex
var tvSeriesShowBeforeDeleteHooks []TVSeriesShowHook
var tvSeriesShowAfterDeleteMu sync.Mutex
var tvSeriesShowAfterDeleteHooks []TVSeriesShowHook

var tvSeriesShowBeforeUpsertMu sync.Mutex
var tvSeriesShowBeforeUpsertHooks []TVSeriesShowHook
var tvSeriesShowAfterUpsertMu sync.Mutex
var tvSeriesShowAfterUpsertHooks []TVSeriesShowHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TVSeriesShow) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tvSeriesShowAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TVSeriesShow) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tvSeriesShowBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TVSeriesShow) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tvSeriesShowAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TVSeriesShow) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tvSeriesShowBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TVSeriesShow) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tvSeriesShowAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TVSeriesShow) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tvSeriesShowBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TVSeriesShow) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tvSeriesShowAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TVSeriesShow) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tvSeriesShowBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TVSeriesShow) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tvSeriesShowAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTVSeriesShowHook registers your hook function for all future operations.
func AddTVSeriesShowHook(hookPoint boil.HookPoint, tvSeriesShowHook TVSeriesShowHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tvSeriesShowAfterSelectMu.Lock()
		tvSeriesShowAfterSelectHooks = append(tvSeriesShowAfterSelectHooks, tvSeriesShowHook)
		tvSeriesShowAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		tvSeriesShowBeforeInsertMu.Lock()
		tvSeriesShowBeforeInsertHooks = append(tvSeriesShowBeforeInsertHooks, tvSeriesShowHook)
		tvSeriesShowBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		tvSeriesShowAfterInsertMu.Lock()
		tvSeriesShowAfterInsertHooks = append(tvSeriesShowAfterInsertHooks, tvSeriesShowHook)
		tvSeriesShowAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		tvSeriesShowBeforeUpdateMu.Lock()
		tvSeriesShowBeforeUpdateHooks = append(tvSeriesShowBeforeUpdateHooks, tvSeriesShowHook)
		tvSeriesShowBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		tvSeriesShowAfterUpdateMu.Lock()
		tvSeriesShowAfterUpdateHooks = append(tvSeriesShowAfterUpdateHooks, tvSeriesShowHook)
		tvSeriesShowAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		tvSeriesShowBeforeDeleteMu.Lock()
		tvSeriesShowBeforeDeleteHooks = append(tvSeriesShowBeforeDeleteHooks, tvSeriesShowHook)
		tvSeriesShowBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		tvSeriesShowAfterDeleteMu.Lock()
		tvSeriesShowAfterDeleteHooks = append(tvSeriesShowAfterDeleteHooks, tvSeriesShowHook)
		tvSeriesShowAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		tvSeriesShowBeforeUpsertMu.Lock()
		tvSeriesShowBeforeUpsertHooks = append(tvSeriesShowBeforeUpsertHooks, tvSeriesShowHook)
		tvSeriesShowBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		tvSeriesShowAfterUpsertMu.Lock()
		tvSeriesShowAfterUpsertHooks = append(tvSeriesShowAfterUpsertHooks, tvSeriesShowHook)
		tvSeriesShowAfterUpsertMu.Unlock()
	}
}

// One returns a single tvSeriesShow record from the query.
func (q tvSeriesShowQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TVSeriesShow, error) {
	o := &TVSeriesShow{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for tv_series_show")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TVSeriesShow records from the query.
func (q tvSeriesShowQuery) All(ctx context.Context, exec boil.ContextExecutor) (TVSeriesShowSlice, error) {
	var o []*TVSeriesShow

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to TVSeriesShow slice")
	}

	if len(tvSeriesShowAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TVSeriesShow records in the query.
func (q tvSeriesShowQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count tv_series_show rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tvSeriesShowQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if tv_series_show exists")
	}

	return count > 0, nil
}

// ShowTVSeasons retrieves all the tv_season's TVSeasons with an executor via show_id column.
func (o *TVSeriesShow) ShowTVSeasons(mods ...qm.QueryMod) tvSeasonQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`tv_seasons`.`show_id`=?", o.ID),
	)

	return TVSeasons(queryMods...)
}

// LoadShowTVSeasons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tvSeriesShowL) LoadShowTVSeasons(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTVSeriesShow interface{}, mods queries.Applicator) error {
	var slice []*TVSeriesShow
	var object *TVSeriesShow

	if singular {
		var ok bool
		object, ok = maybeTVSeriesShow.(*TVSeriesShow)
		if !ok {
			object = new(TVSeriesShow)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTVSeriesShow)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTVSeriesShow))
			}
		}
	} else {
		s, ok := maybeTVSeriesShow.(*[]*TVSeriesShow)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTVSeriesShow)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTVSeriesShow))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tvSeriesShowR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tvSeriesShowR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tv_seasons`),
		qm.WhereIn(`tv_seasons.show_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tv_seasons")
	}

	var resultSlice []*TVSeason
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tv_seasons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tv_seasons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tv_seasons")
	}

	if len(tvSeasonAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ShowTVSeasons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tvSeasonR{}
			}
			foreign.R.Show = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ShowID {
				local.R.ShowTVSeasons = append(local.R.ShowTVSeasons, foreign)
				if foreign.R == nil {
					foreign.R = &tvSeasonR{}
				}
				foreign.R.Show = local
				break
			}
		}
	}

	return nil
}

// AddShowTVSeasons adds the given related objects to the existing relationships
// of the tv_series_show, optionally inserting them as new records.
// Appends related to o.R.ShowTVSeasons.
// Sets related.R.Show appropriately.
func (o *TVSeriesShow) AddShowTVSeasons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TVSeason) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ShowID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `tv_seasons` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"show_id"}),
				strmangle.WhereClause("`", "`", 0, tvSeasonPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ShowID = o.ID
		}
	}

	if o.R == nil {
		o.R = &tvSeriesShowR{
			ShowTVSeasons: related,
		}
	} else {
		o.R.ShowTVSeasons = append(o.R.ShowTVSeasons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tvSeasonR{
				Show: o,
			}
		} else {
			rel.R.Show = o
		}
	}
	return nil
}

// TVSeriesShows retrieves all the records using an executor.
func TVSeriesShows(mods ...qm.QueryMod) tvSeriesShowQuery {
	mods = append(mods, qm.From("`tv_series_show`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`tv_series_show`.*"})
	}

	return tvSeriesShowQuery{q}
}

// FindTVSeriesShow retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTVSeriesShow(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*TVSeriesShow, error) {
	tvSeriesShowObj := &TVSeriesShow{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `tv_series_show` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tvSeriesShowObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from tv_series_show")
	}

	if err = tvSeriesShowObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tvSeriesShowObj, err
	}

	return tvSeriesShowObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TVSeriesShow) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no tv_series_show provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tvSeriesShowColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tvSeriesShowInsertCacheMut.RLock()
	cache, cached := tvSeriesShowInsertCache[key]
	tvSeriesShowInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tvSeriesShowAllColumns,
			tvSeriesShowColumnsWithDefault,
			tvSeriesShowColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tvSeriesShowType, tvSeriesShowMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tvSeriesShowType, tvSeriesShowMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `tv_series_show` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `tv_series_show` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `tv_series_show` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, tvSeriesShowPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into tv_series_show")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for tv_series_show")
	}

CacheNoHooks:
	if !cached {
		tvSeriesShowInsertCacheMut.Lock()
		tvSeriesShowInsertCache[key] = cache
		tvSeriesShowInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TVSeriesShow.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TVSeriesShow) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tvSeriesShowUpdateCacheMut.RLock()
	cache, cached := tvSeriesShowUpdateCache[key]
	tvSeriesShowUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tvSeriesShowAllColumns,
			tvSeriesShowPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update tv_series_show, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `tv_series_show` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, tvSeriesShowPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tvSeriesShowType, tvSeriesShowMapping, append(wl, tvSeriesShowPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update tv_series_show row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for tv_series_show")
	}

	if !cached {
		tvSeriesShowUpdateCacheMut.Lock()
		tvSeriesShowUpdateCache[key] = cache
		tvSeriesShowUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tvSeriesShowQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for tv_series_show")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for tv_series_show")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TVSeriesShowSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tvSeriesShowPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `tv_series_show` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tvSeriesShowPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in tvSeriesShow slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all tvSeriesShow")
	}
	return rowsAff, nil
}

var mySQLTVSeriesShowUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TVSeriesShow) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no tv_series_show provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tvSeriesShowColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTVSeriesShowUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tvSeriesShowUpsertCacheMut.RLock()
	cache, cached := tvSeriesShowUpsertCache[key]
	tvSeriesShowUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			tvSeriesShowAllColumns,
			tvSeriesShowColumnsWithDefault,
			tvSeriesShowColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tvSeriesShowAllColumns,
			tvSeriesShowPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert tv_series_show, could not build update column list")
		}

		ret := strmangle.SetComplement(tvSeriesShowAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`tv_series_show`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `tv_series_show` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(tvSeriesShowType, tvSeriesShowMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tvSeriesShowType, tvSeriesShowMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for tv_series_show")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(tvSeriesShowType, tvSeriesShowMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for tv_series_show")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for tv_series_show")
	}

CacheNoHooks:
	if !cached {
		tvSeriesShowUpsertCacheMut.Lock()
		tvSeriesShowUpsertCache[key] = cache
		tvSeriesShowUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TVSeriesShow record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TVSeriesShow) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no TVSeriesShow provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tvSeriesShowPrimaryKeyMapping)
	sql := "DELETE FROM `tv_series_show` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from tv_series_show")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for tv_series_show")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tvSeriesShowQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no tvSeriesShowQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from tv_series_show")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for tv_series_show")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TVSeriesShowSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tvSeriesShowBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tvSeriesShowPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `tv_series_show` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tvSeriesShowPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from tvSeriesShow slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for tv_series_show")
	}

	if len(tvSeriesShowAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TVSeriesShow) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTVSeriesShow(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TVSeriesShowSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TVSeriesShowSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tvSeriesShowPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `tv_series_show`.* FROM `tv_series_show` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tvSeriesShowPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in TVSeriesShowSlice")
	}

	*o = slice

	return nil
}

// TVSeriesShowExists checks if the TVSeriesShow row exists.
func TVSeriesShowExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `tv_series_show` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if tv_series_show exists")
	}

	return exists, nil
}

// Exists checks if the TVSeriesShow row exists.
func (o *TVSeriesShow) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TVSeriesShowExists(ctx, exec, o.ID)
}
