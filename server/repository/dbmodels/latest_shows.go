// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// LatestShow is an object representing the database table.
type LatestShow struct {
	ID            int64           `boil:"id" json:"id" toml:"id" yaml:"id"`
	Type          LatestShowsType `boil:"type" json:"type" toml:"type" yaml:"type"`
	ShowID        int64           `boil:"show_id" json:"show_id" toml:"show_id" yaml:"show_id"`
	Title         string          `boil:"title" json:"title" toml:"title" yaml:"title"`
	OriginalTitle string          `boil:"original_title" json:"original_title" toml:"original_title" yaml:"original_title"`
	PosterPath    string          `boil:"poster_path" json:"poster_path" toml:"poster_path" yaml:"poster_path"`
	AirDate       null.Time       `boil:"air_date" json:"air_date,omitempty" toml:"air_date" yaml:"air_date,omitempty"`
	Runtime       null.Int        `boil:"runtime" json:"runtime,omitempty" toml:"runtime" yaml:"runtime,omitempty"`
	VoteAverage   float32         `boil:"vote_average" json:"vote_average" toml:"vote_average" yaml:"vote_average"`
	Quality       string          `boil:"quality" json:"quality" toml:"quality" yaml:"quality"`
	SeasonNumber  null.Int        `boil:"season_number" json:"season_number,omitempty" toml:"season_number" yaml:"season_number,omitempty"`
	EpisodeNumber null.Int        `boil:"episode_number" json:"episode_number,omitempty" toml:"episode_number" yaml:"episode_number,omitempty"`
	CreatedAt     time.Time       `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time       `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *latestShowR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L latestShowL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LatestShowColumns = struct {
	ID            string
	Type          string
	ShowID        string
	Title         string
	OriginalTitle string
	PosterPath    string
	AirDate       string
	Runtime       string
	VoteAverage   string
	Quality       string
	SeasonNumber  string
	EpisodeNumber string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "id",
	Type:          "type",
	ShowID:        "show_id",
	Title:         "title",
	OriginalTitle: "original_title",
	PosterPath:    "poster_path",
	AirDate:       "air_date",
	Runtime:       "runtime",
	VoteAverage:   "vote_average",
	Quality:       "quality",
	SeasonNumber:  "season_number",
	EpisodeNumber: "episode_number",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

var LatestShowTableColumns = struct {
	ID            string
	Type          string
	ShowID        string
	Title         string
	OriginalTitle string
	PosterPath    string
	AirDate       string
	Runtime       string
	VoteAverage   string
	Quality       string
	SeasonNumber  string
	EpisodeNumber string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "latest_shows.id",
	Type:          "latest_shows.type",
	ShowID:        "latest_shows.show_id",
	Title:         "latest_shows.title",
	OriginalTitle: "latest_shows.original_title",
	PosterPath:    "latest_shows.poster_path",
	AirDate:       "latest_shows.air_date",
	Runtime:       "latest_shows.runtime",
	VoteAverage:   "latest_shows.vote_average",
	Quality:       "latest_shows.quality",
	SeasonNumber:  "latest_shows.season_number",
	EpisodeNumber: "latest_shows.episode_number",
	CreatedAt:     "latest_shows.created_at",
	UpdatedAt:     "latest_shows.updated_at",
}

// Generated where

type whereHelperLatestShowsType struct{ field string }

func (w whereHelperLatestShowsType) EQ(x LatestShowsType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperLatestShowsType) NEQ(x LatestShowsType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperLatestShowsType) LT(x LatestShowsType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperLatestShowsType) LTE(x LatestShowsType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperLatestShowsType) GT(x LatestShowsType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperLatestShowsType) GTE(x LatestShowsType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperLatestShowsType) IN(slice []LatestShowsType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperLatestShowsType) NIN(slice []LatestShowsType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperfloat32 struct{ field string }

func (w whereHelperfloat32) EQ(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat32) NEQ(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat32) LT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat32) LTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat32) GT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat32) GTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat32) IN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat32) NIN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var LatestShowWhere = struct {
	ID            whereHelperint64
	Type          whereHelperLatestShowsType
	ShowID        whereHelperint64
	Title         whereHelperstring
	OriginalTitle whereHelperstring
	PosterPath    whereHelperstring
	AirDate       whereHelpernull_Time
	Runtime       whereHelpernull_Int
	VoteAverage   whereHelperfloat32
	Quality       whereHelperstring
	SeasonNumber  whereHelpernull_Int
	EpisodeNumber whereHelpernull_Int
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
}{
	ID:            whereHelperint64{field: "`latest_shows`.`id`"},
	Type:          whereHelperLatestShowsType{field: "`latest_shows`.`type`"},
	ShowID:        whereHelperint64{field: "`latest_shows`.`show_id`"},
	Title:         whereHelperstring{field: "`latest_shows`.`title`"},
	OriginalTitle: whereHelperstring{field: "`latest_shows`.`original_title`"},
	PosterPath:    whereHelperstring{field: "`latest_shows`.`poster_path`"},
	AirDate:       whereHelpernull_Time{field: "`latest_shows`.`air_date`"},
	Runtime:       whereHelpernull_Int{field: "`latest_shows`.`runtime`"},
	VoteAverage:   whereHelperfloat32{field: "`latest_shows`.`vote_average`"},
	Quality:       whereHelperstring{field: "`latest_shows`.`quality`"},
	SeasonNumber:  whereHelpernull_Int{field: "`latest_shows`.`season_number`"},
	EpisodeNumber: whereHelpernull_Int{field: "`latest_shows`.`episode_number`"},
	CreatedAt:     whereHelpertime_Time{field: "`latest_shows`.`created_at`"},
	UpdatedAt:     whereHelpertime_Time{field: "`latest_shows`.`updated_at`"},
}

// LatestShowRels is where relationship names are stored.
var LatestShowRels = struct {
}{}

// latestShowR is where relationships are stored.
type latestShowR struct {
}

// NewStruct creates a new relationship struct
func (*latestShowR) NewStruct() *latestShowR {
	return &latestShowR{}
}

// latestShowL is where Load methods for each relationship are stored.
type latestShowL struct{}

var (
	latestShowAllColumns            = []string{"id", "type", "show_id", "title", "original_title", "poster_path", "air_date", "runtime", "vote_average", "quality", "season_number", "episode_number", "created_at", "updated_at"}
	latestShowColumnsWithoutDefault = []string{"type", "show_id", "title", "original_title", "poster_path", "air_date", "runtime", "vote_average", "quality", "season_number", "episode_number"}
	latestShowColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	latestShowPrimaryKeyColumns     = []string{"id"}
	latestShowGeneratedColumns      = []string{}
)

type (
	// LatestShowSlice is an alias for a slice of pointers to LatestShow.
	// This should almost always be used instead of []LatestShow.
	LatestShowSlice []*LatestShow
	// LatestShowHook is the signature for custom LatestShow hook methods
	LatestShowHook func(context.Context, boil.ContextExecutor, *LatestShow) error

	latestShowQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	latestShowType                 = reflect.TypeOf(&LatestShow{})
	latestShowMapping              = queries.MakeStructMapping(latestShowType)
	latestShowPrimaryKeyMapping, _ = queries.BindMapping(latestShowType, latestShowMapping, latestShowPrimaryKeyColumns)
	latestShowInsertCacheMut       sync.RWMutex
	latestShowInsertCache          = make(map[string]insertCache)
	latestShowUpdateCacheMut       sync.RWMutex
	latestShowUpdateCache          = make(map[string]updateCache)
	latestShowUpsertCacheMut       sync.RWMutex
	latestShowUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var latestShowAfterSelectMu sync.Mutex
var latestShowAfterSelectHooks []LatestShowHook

var latestShowBeforeInsertMu sync.Mutex
var latestShowBeforeInsertHooks []LatestShowHook
var latestShowAfterInsertMu sync.Mutex
var latestShowAfterInsertHooks []LatestShowHook

var latestShowBeforeUpdateMu sync.Mutex
var latestShowBeforeUpdateHooks []LatestShowHook
var latestShowAfterUpdateMu sync.Mutex
var latestShowAfterUpdateHooks []LatestShowHook

var latestShowBeforeDeleteMu sync.Mutex
var latestShowBeforeDeleteHooks []LatestShowHook
var latestShowAfterDeleteMu sync.Mutex
var latestShowAfterDeleteHooks []LatestShowHook

var latestShowBeforeUpsertMu sync.Mutex
var latestShowBeforeUpsertHooks []LatestShowHook
var latestShowAfterUpsertMu sync.Mutex
var latestShowAfterUpsertHooks []LatestShowHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LatestShow) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range latestShowAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LatestShow) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range latestShowBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LatestShow) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range latestShowAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LatestShow) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range latestShowBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LatestShow) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range latestShowAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LatestShow) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range latestShowBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LatestShow) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range latestShowAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LatestShow) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range latestShowBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LatestShow) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range latestShowAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLatestShowHook registers your hook function for all future operations.
func AddLatestShowHook(hookPoint boil.HookPoint, latestShowHook LatestShowHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		latestShowAfterSelectMu.Lock()
		latestShowAfterSelectHooks = append(latestShowAfterSelectHooks, latestShowHook)
		latestShowAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		latestShowBeforeInsertMu.Lock()
		latestShowBeforeInsertHooks = append(latestShowBeforeInsertHooks, latestShowHook)
		latestShowBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		latestShowAfterInsertMu.Lock()
		latestShowAfterInsertHooks = append(latestShowAfterInsertHooks, latestShowHook)
		latestShowAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		latestShowBeforeUpdateMu.Lock()
		latestShowBeforeUpdateHooks = append(latestShowBeforeUpdateHooks, latestShowHook)
		latestShowBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		latestShowAfterUpdateMu.Lock()
		latestShowAfterUpdateHooks = append(latestShowAfterUpdateHooks, latestShowHook)
		latestShowAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		latestShowBeforeDeleteMu.Lock()
		latestShowBeforeDeleteHooks = append(latestShowBeforeDeleteHooks, latestShowHook)
		latestShowBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		latestShowAfterDeleteMu.Lock()
		latestShowAfterDeleteHooks = append(latestShowAfterDeleteHooks, latestShowHook)
		latestShowAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		latestShowBeforeUpsertMu.Lock()
		latestShowBeforeUpsertHooks = append(latestShowBeforeUpsertHooks, latestShowHook)
		latestShowBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		latestShowAfterUpsertMu.Lock()
		latestShowAfterUpsertHooks = append(latestShowAfterUpsertHooks, latestShowHook)
		latestShowAfterUpsertMu.Unlock()
	}
}

// One returns a single latestShow record from the query.
func (q latestShowQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LatestShow, error) {
	o := &LatestShow{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for latest_shows")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all LatestShow records from the query.
func (q latestShowQuery) All(ctx context.Context, exec boil.ContextExecutor) (LatestShowSlice, error) {
	var o []*LatestShow

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to LatestShow slice")
	}

	if len(latestShowAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all LatestShow records in the query.
func (q latestShowQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count latest_shows rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q latestShowQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if latest_shows exists")
	}

	return count > 0, nil
}

// LatestShows retrieves all the records using an executor.
func LatestShows(mods ...qm.QueryMod) latestShowQuery {
	mods = append(mods, qm.From("`latest_shows`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`latest_shows`.*"})
	}

	return latestShowQuery{q}
}

// FindLatestShow retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLatestShow(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*LatestShow, error) {
	latestShowObj := &LatestShow{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `latest_shows` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, latestShowObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from latest_shows")
	}

	if err = latestShowObj.doAfterSelectHooks(ctx, exec); err != nil {
		return latestShowObj, err
	}

	return latestShowObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LatestShow) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no latest_shows provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(latestShowColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	latestShowInsertCacheMut.RLock()
	cache, cached := latestShowInsertCache[key]
	latestShowInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			latestShowAllColumns,
			latestShowColumnsWithDefault,
			latestShowColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(latestShowType, latestShowMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(latestShowType, latestShowMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `latest_shows` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `latest_shows` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `latest_shows` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, latestShowPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into latest_shows")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == latestShowMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for latest_shows")
	}

CacheNoHooks:
	if !cached {
		latestShowInsertCacheMut.Lock()
		latestShowInsertCache[key] = cache
		latestShowInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the LatestShow.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LatestShow) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	latestShowUpdateCacheMut.RLock()
	cache, cached := latestShowUpdateCache[key]
	latestShowUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			latestShowAllColumns,
			latestShowPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update latest_shows, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `latest_shows` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, latestShowPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(latestShowType, latestShowMapping, append(wl, latestShowPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update latest_shows row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for latest_shows")
	}

	if !cached {
		latestShowUpdateCacheMut.Lock()
		latestShowUpdateCache[key] = cache
		latestShowUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q latestShowQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for latest_shows")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for latest_shows")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LatestShowSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), latestShowPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `latest_shows` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, latestShowPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in latestShow slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all latestShow")
	}
	return rowsAff, nil
}

var mySQLLatestShowUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LatestShow) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no latest_shows provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(latestShowColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLLatestShowUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	latestShowUpsertCacheMut.RLock()
	cache, cached := latestShowUpsertCache[key]
	latestShowUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			latestShowAllColumns,
			latestShowColumnsWithDefault,
			latestShowColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			latestShowAllColumns,
			latestShowPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert latest_shows, could not build update column list")
		}

		ret := strmangle.SetComplement(latestShowAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`latest_shows`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `latest_shows` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(latestShowType, latestShowMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(latestShowType, latestShowMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for latest_shows")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == latestShowMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(latestShowType, latestShowMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for latest_shows")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for latest_shows")
	}

CacheNoHooks:
	if !cached {
		latestShowUpsertCacheMut.Lock()
		latestShowUpsertCache[key] = cache
		latestShowUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single LatestShow record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LatestShow) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no LatestShow provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), latestShowPrimaryKeyMapping)
	sql := "DELETE FROM `latest_shows` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from latest_shows")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for latest_shows")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q latestShowQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no latestShowQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from latest_shows")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for latest_shows")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LatestShowSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(latestShowBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), latestShowPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `latest_shows` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, latestShowPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from latestShow slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for latest_shows")
	}

	if len(latestShowAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LatestShow) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLatestShow(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LatestShowSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LatestShowSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), latestShowPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `latest_shows`.* FROM `latest_shows` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, latestShowPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in LatestShowSlice")
	}

	*o = slice

	return nil
}

// LatestShowExists checks if the LatestShow row exists.
func LatestShowExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `latest_shows` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if latest_shows exists")
	}

	return exists, nil
}

// Exists checks if the LatestShow row exists.
func (o *LatestShow) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return LatestShowExists(ctx, exec, o.ID)
}
