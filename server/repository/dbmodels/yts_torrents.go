// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// YtsTorrent is an object representing the database table.
type YtsTorrent struct {
	Hash          string    `boil:"hash" json:"hash" toml:"hash" yaml:"hash"`
	MovieID       int64     `boil:"movie_id" json:"movie_id" toml:"movie_id" yaml:"movie_id"`
	Quality       string    `boil:"quality" json:"quality" toml:"quality" yaml:"quality"`
	Resolution    int       `boil:"resolution" json:"resolution" toml:"resolution" yaml:"resolution"`
	Type          string    `boil:"type" json:"type" toml:"type" yaml:"type"`
	IsRepack      bool      `boil:"is_repack" json:"is_repack" toml:"is_repack" yaml:"is_repack"`
	VideoCodec    string    `boil:"video_codec" json:"video_codec" toml:"video_codec" yaml:"video_codec"`
	BitDepth      int       `boil:"bit_depth" json:"bit_depth" toml:"bit_depth" yaml:"bit_depth"`
	AudioChannels string    `boil:"audio_channels" json:"audio_channels" toml:"audio_channels" yaml:"audio_channels"`
	Seeds         int       `boil:"seeds" json:"seeds" toml:"seeds" yaml:"seeds"`
	Peers         int       `boil:"peers" json:"peers" toml:"peers" yaml:"peers"`
	SizeBytes     int64     `boil:"size_bytes" json:"size_bytes" toml:"size_bytes" yaml:"size_bytes"`
	DateUploaded  time.Time `boil:"date_uploaded" json:"date_uploaded" toml:"date_uploaded" yaml:"date_uploaded"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *ytsTorrentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ytsTorrentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var YtsTorrentColumns = struct {
	Hash          string
	MovieID       string
	Quality       string
	Resolution    string
	Type          string
	IsRepack      string
	VideoCodec    string
	BitDepth      string
	AudioChannels string
	Seeds         string
	Peers         string
	SizeBytes     string
	DateUploaded  string
	CreatedAt     string
	UpdatedAt     string
}{
	Hash:          "hash",
	MovieID:       "movie_id",
	Quality:       "quality",
	Resolution:    "resolution",
	Type:          "type",
	IsRepack:      "is_repack",
	VideoCodec:    "video_codec",
	BitDepth:      "bit_depth",
	AudioChannels: "audio_channels",
	Seeds:         "seeds",
	Peers:         "peers",
	SizeBytes:     "size_bytes",
	DateUploaded:  "date_uploaded",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

var YtsTorrentTableColumns = struct {
	Hash          string
	MovieID       string
	Quality       string
	Resolution    string
	Type          string
	IsRepack      string
	VideoCodec    string
	BitDepth      string
	AudioChannels string
	Seeds         string
	Peers         string
	SizeBytes     string
	DateUploaded  string
	CreatedAt     string
	UpdatedAt     string
}{
	Hash:          "yts_torrents.hash",
	MovieID:       "yts_torrents.movie_id",
	Quality:       "yts_torrents.quality",
	Resolution:    "yts_torrents.resolution",
	Type:          "yts_torrents.type",
	IsRepack:      "yts_torrents.is_repack",
	VideoCodec:    "yts_torrents.video_codec",
	BitDepth:      "yts_torrents.bit_depth",
	AudioChannels: "yts_torrents.audio_channels",
	Seeds:         "yts_torrents.seeds",
	Peers:         "yts_torrents.peers",
	SizeBytes:     "yts_torrents.size_bytes",
	DateUploaded:  "yts_torrents.date_uploaded",
	CreatedAt:     "yts_torrents.created_at",
	UpdatedAt:     "yts_torrents.updated_at",
}

// Generated where

var YtsTorrentWhere = struct {
	Hash          whereHelperstring
	MovieID       whereHelperint64
	Quality       whereHelperstring
	Resolution    whereHelperint
	Type          whereHelperstring
	IsRepack      whereHelperbool
	VideoCodec    whereHelperstring
	BitDepth      whereHelperint
	AudioChannels whereHelperstring
	Seeds         whereHelperint
	Peers         whereHelperint
	SizeBytes     whereHelperint64
	DateUploaded  whereHelpertime_Time
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
}{
	Hash:          whereHelperstring{field: "`yts_torrents`.`hash`"},
	MovieID:       whereHelperint64{field: "`yts_torrents`.`movie_id`"},
	Quality:       whereHelperstring{field: "`yts_torrents`.`quality`"},
	Resolution:    whereHelperint{field: "`yts_torrents`.`resolution`"},
	Type:          whereHelperstring{field: "`yts_torrents`.`type`"},
	IsRepack:      whereHelperbool{field: "`yts_torrents`.`is_repack`"},
	VideoCodec:    whereHelperstring{field: "`yts_torrents`.`video_codec`"},
	BitDepth:      whereHelperint{field: "`yts_torrents`.`bit_depth`"},
	AudioChannels: whereHelperstring{field: "`yts_torrents`.`audio_channels`"},
	Seeds:         whereHelperint{field: "`yts_torrents`.`seeds`"},
	Peers:         whereHelperint{field: "`yts_torrents`.`peers`"},
	SizeBytes:     whereHelperint64{field: "`yts_torrents`.`size_bytes`"},
	DateUploaded:  whereHelpertime_Time{field: "`yts_torrents`.`date_uploaded`"},
	CreatedAt:     whereHelpertime_Time{field: "`yts_torrents`.`created_at`"},
	UpdatedAt:     whereHelpertime_Time{field: "`yts_torrents`.`updated_at`"},
}

// YtsTorrentRels is where relationship names are stored.
var YtsTorrentRels = struct {
	Movie string
}{
	Movie: "Movie",
}

// ytsTorrentR is where relationships are stored.
type ytsTorrentR struct {
	Movie *Video `boil:"Movie" json:"Movie" toml:"Movie" yaml:"Movie"`
}

// NewStruct creates a new relationship struct
func (*ytsTorrentR) NewStruct() *ytsTorrentR {
	return &ytsTorrentR{}
}

func (r *ytsTorrentR) GetMovie() *Video {
	if r == nil {
		return nil
	}
	return r.Movie
}

// ytsTorrentL is where Load methods for each relationship are stored.
type ytsTorrentL struct{}

var (
	ytsTorrentAllColumns            = []string{"hash", "movie_id", "quality", "resolution", "type", "is_repack", "video_codec", "bit_depth", "audio_channels", "seeds", "peers", "size_bytes", "date_uploaded", "created_at", "updated_at"}
	ytsTorrentColumnsWithoutDefault = []string{"hash", "movie_id", "quality", "type", "video_codec", "audio_channels", "seeds", "peers", "size_bytes", "date_uploaded"}
	ytsTorrentColumnsWithDefault    = []string{"resolution", "is_repack", "bit_depth", "created_at", "updated_at"}
	ytsTorrentPrimaryKeyColumns     = []string{"hash"}
	ytsTorrentGeneratedColumns      = []string{}
)

type (
	// YtsTorrentSlice is an alias for a slice of pointers to YtsTorrent.
	// This should almost always be used instead of []YtsTorrent.
	YtsTorrentSlice []*YtsTorrent
	// YtsTorrentHook is the signature for custom YtsTorrent hook methods
	YtsTorrentHook func(context.Context, boil.ContextExecutor, *YtsTorrent) error

	ytsTorrentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ytsTorrentType                 = reflect.TypeOf(&YtsTorrent{})
	ytsTorrentMapping              = queries.MakeStructMapping(ytsTorrentType)
	ytsTorrentPrimaryKeyMapping, _ = queries.BindMapping(ytsTorrentType, ytsTorrentMapping, ytsTorrentPrimaryKeyColumns)
	ytsTorrentInsertCacheMut       sync.RWMutex
	ytsTorrentInsertCache          = make(map[string]insertCache)
	ytsTorrentUpdateCacheMut       sync.RWMutex
	ytsTorrentUpdateCache          = make(map[string]updateCache)
	ytsTorrentUpsertCacheMut       sync.RWMutex
	ytsTorrentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ytsTorrentAfterSelectMu sync.Mutex
var ytsTorrentAfterSelectHooks []YtsTorrentHook

var ytsTorrentBeforeInsertMu sync.Mutex
var ytsTorrentBeforeInsertHooks []YtsTorrentHook
var ytsTorrentAfterInsertMu sync.Mutex
var ytsTorrentAfterInsertHooks []YtsTorrentHook

var ytsTorrentBeforeUpdateMu sync.Mutex
var ytsTorrentBeforeUpdateHooks []YtsTorrentHook
var ytsTorrentAfterUpdateMu sync.Mutex
var ytsTorrentAfterUpdateHooks []YtsTorrentHook

var ytsTorrentBeforeDeleteMu sync.Mutex
var ytsTorrentBeforeDeleteHooks []YtsTorrentHook
var ytsTorrentAfterDeleteMu sync.Mutex
var ytsTorrentAfterDeleteHooks []YtsTorrentHook

var ytsTorrentBeforeUpsertMu sync.Mutex
var ytsTorrentBeforeUpsertHooks []YtsTorrentHook
var ytsTorrentAfterUpsertMu sync.Mutex
var ytsTorrentAfterUpsertHooks []YtsTorrentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *YtsTorrent) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ytsTorrentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *YtsTorrent) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ytsTorrentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *YtsTorrent) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ytsTorrentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *YtsTorrent) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ytsTorrentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *YtsTorrent) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ytsTorrentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *YtsTorrent) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ytsTorrentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *YtsTorrent) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ytsTorrentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *YtsTorrent) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ytsTorrentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *YtsTorrent) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ytsTorrentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddYtsTorrentHook registers your hook function for all future operations.
func AddYtsTorrentHook(hookPoint boil.HookPoint, ytsTorrentHook YtsTorrentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ytsTorrentAfterSelectMu.Lock()
		ytsTorrentAfterSelectHooks = append(ytsTorrentAfterSelectHooks, ytsTorrentHook)
		ytsTorrentAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		ytsTorrentBeforeInsertMu.Lock()
		ytsTorrentBeforeInsertHooks = append(ytsTorrentBeforeInsertHooks, ytsTorrentHook)
		ytsTorrentBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		ytsTorrentAfterInsertMu.Lock()
		ytsTorrentAfterInsertHooks = append(ytsTorrentAfterInsertHooks, ytsTorrentHook)
		ytsTorrentAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		ytsTorrentBeforeUpdateMu.Lock()
		ytsTorrentBeforeUpdateHooks = append(ytsTorrentBeforeUpdateHooks, ytsTorrentHook)
		ytsTorrentBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		ytsTorrentAfterUpdateMu.Lock()
		ytsTorrentAfterUpdateHooks = append(ytsTorrentAfterUpdateHooks, ytsTorrentHook)
		ytsTorrentAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		ytsTorrentBeforeDeleteMu.Lock()
		ytsTorrentBeforeDeleteHooks = append(ytsTorrentBeforeDeleteHooks, ytsTorrentHook)
		ytsTorrentBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		ytsTorrentAfterDeleteMu.Lock()
		ytsTorrentAfterDeleteHooks = append(ytsTorrentAfterDeleteHooks, ytsTorrentHook)
		ytsTorrentAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		ytsTorrentBeforeUpsertMu.Lock()
		ytsTorrentBeforeUpsertHooks = append(ytsTorrentBeforeUpsertHooks, ytsTorrentHook)
		ytsTorrentBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		ytsTorrentAfterUpsertMu.Lock()
		ytsTorrentAfterUpsertHooks = append(ytsTorrentAfterUpsertHooks, ytsTorrentHook)
		ytsTorrentAfterUpsertMu.Unlock()
	}
}

// One returns a single ytsTorrent record from the query.
func (q ytsTorrentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*YtsTorrent, error) {
	o := &YtsTorrent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for yts_torrents")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all YtsTorrent records from the query.
func (q ytsTorrentQuery) All(ctx context.Context, exec boil.ContextExecutor) (YtsTorrentSlice, error) {
	var o []*YtsTorrent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to YtsTorrent slice")
	}

	if len(ytsTorrentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all YtsTorrent records in the query.
func (q ytsTorrentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count yts_torrents rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q ytsTorrentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if yts_torrents exists")
	}

	return count > 0, nil
}

// Movie pointed to by the foreign key.
func (o *YtsTorrent) Movie(mods ...qm.QueryMod) videoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`yts_movie_id` = ?", o.MovieID),
	}

	queryMods = append(queryMods, mods...)

	return Videos(queryMods...)
}

// LoadMovie allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (ytsTorrentL) LoadMovie(ctx context.Context, e boil.ContextExecutor, singular bool, maybeYtsTorrent interface{}, mods queries.Applicator) error {
	var slice []*YtsTorrent
	var object *YtsTorrent

	if singular {
		var ok bool
		object, ok = maybeYtsTorrent.(*YtsTorrent)
		if !ok {
			object = new(YtsTorrent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeYtsTorrent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeYtsTorrent))
			}
		}
	} else {
		s, ok := maybeYtsTorrent.(*[]*YtsTorrent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeYtsTorrent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeYtsTorrent))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &ytsTorrentR{}
		}
		if !queries.IsNil(object.MovieID) {
			args[object.MovieID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ytsTorrentR{}
			}

			if !queries.IsNil(obj.MovieID) {
				args[obj.MovieID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`videos`),
		qm.WhereIn(`videos.yts_movie_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Video")
	}

	var resultSlice []*Video
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Video")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for videos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for videos")
	}

	if len(videoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Movie = foreign
		if foreign.R == nil {
			foreign.R = &videoR{}
		}
		foreign.R.MovieYtsTorrents = append(foreign.R.MovieYtsTorrents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MovieID, foreign.YtsMovieID) {
				local.R.Movie = foreign
				if foreign.R == nil {
					foreign.R = &videoR{}
				}
				foreign.R.MovieYtsTorrents = append(foreign.R.MovieYtsTorrents, local)
				break
			}
		}
	}

	return nil
}

// SetMovie of the ytsTorrent to the related item.
// Sets o.R.Movie to related.
// Adds o to related.R.MovieYtsTorrents.
func (o *YtsTorrent) SetMovie(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Video) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `yts_torrents` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"movie_id"}),
		strmangle.WhereClause("`", "`", 0, ytsTorrentPrimaryKeyColumns),
	)
	values := []interface{}{related.YtsMovieID, o.Hash}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MovieID, related.YtsMovieID)
	if o.R == nil {
		o.R = &ytsTorrentR{
			Movie: related,
		}
	} else {
		o.R.Movie = related
	}

	if related.R == nil {
		related.R = &videoR{
			MovieYtsTorrents: YtsTorrentSlice{o},
		}
	} else {
		related.R.MovieYtsTorrents = append(related.R.MovieYtsTorrents, o)
	}

	return nil
}

// YtsTorrents retrieves all the records using an executor.
func YtsTorrents(mods ...qm.QueryMod) ytsTorrentQuery {
	mods = append(mods, qm.From("`yts_torrents`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`yts_torrents`.*"})
	}

	return ytsTorrentQuery{q}
}

// FindYtsTorrent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindYtsTorrent(ctx context.Context, exec boil.ContextExecutor, hash string, selectCols ...string) (*YtsTorrent, error) {
	ytsTorrentObj := &YtsTorrent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `yts_torrents` where `hash`=?", sel,
	)

	q := queries.Raw(query, hash)

	err := q.Bind(ctx, exec, ytsTorrentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from yts_torrents")
	}

	if err = ytsTorrentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return ytsTorrentObj, err
	}

	return ytsTorrentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *YtsTorrent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no yts_torrents provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ytsTorrentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ytsTorrentInsertCacheMut.RLock()
	cache, cached := ytsTorrentInsertCache[key]
	ytsTorrentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ytsTorrentAllColumns,
			ytsTorrentColumnsWithDefault,
			ytsTorrentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(ytsTorrentType, ytsTorrentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ytsTorrentType, ytsTorrentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `yts_torrents` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `yts_torrents` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `yts_torrents` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, ytsTorrentPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into yts_torrents")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Hash,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for yts_torrents")
	}

CacheNoHooks:
	if !cached {
		ytsTorrentInsertCacheMut.Lock()
		ytsTorrentInsertCache[key] = cache
		ytsTorrentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the YtsTorrent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *YtsTorrent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ytsTorrentUpdateCacheMut.RLock()
	cache, cached := ytsTorrentUpdateCache[key]
	ytsTorrentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ytsTorrentAllColumns,
			ytsTorrentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update yts_torrents, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `yts_torrents` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, ytsTorrentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ytsTorrentType, ytsTorrentMapping, append(wl, ytsTorrentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update yts_torrents row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for yts_torrents")
	}

	if !cached {
		ytsTorrentUpdateCacheMut.Lock()
		ytsTorrentUpdateCache[key] = cache
		ytsTorrentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q ytsTorrentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for yts_torrents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for yts_torrents")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o YtsTorrentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ytsTorrentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `yts_torrents` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ytsTorrentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in ytsTorrent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all ytsTorrent")
	}
	return rowsAff, nil
}

var mySQLYtsTorrentUniqueColumns = []string{
	"hash",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *YtsTorrent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no yts_torrents provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ytsTorrentColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLYtsTorrentUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ytsTorrentUpsertCacheMut.RLock()
	cache, cached := ytsTorrentUpsertCache[key]
	ytsTorrentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			ytsTorrentAllColumns,
			ytsTorrentColumnsWithDefault,
			ytsTorrentColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			ytsTorrentAllColumns,
			ytsTorrentPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert yts_torrents, could not build update column list")
		}

		ret := strmangle.SetComplement(ytsTorrentAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`yts_torrents`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `yts_torrents` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(ytsTorrentType, ytsTorrentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ytsTorrentType, ytsTorrentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for yts_torrents")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(ytsTorrentType, ytsTorrentMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for yts_torrents")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for yts_torrents")
	}

CacheNoHooks:
	if !cached {
		ytsTorrentUpsertCacheMut.Lock()
		ytsTorrentUpsertCache[key] = cache
		ytsTorrentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single YtsTorrent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *YtsTorrent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no YtsTorrent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ytsTorrentPrimaryKeyMapping)
	sql := "DELETE FROM `yts_torrents` WHERE `hash`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from yts_torrents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for yts_torrents")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q ytsTorrentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no ytsTorrentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from yts_torrents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for yts_torrents")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o YtsTorrentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ytsTorrentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ytsTorrentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `yts_torrents` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ytsTorrentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from ytsTorrent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for yts_torrents")
	}

	if len(ytsTorrentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *YtsTorrent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindYtsTorrent(ctx, exec, o.Hash)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *YtsTorrentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := YtsTorrentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ytsTorrentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `yts_torrents`.* FROM `yts_torrents` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ytsTorrentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in YtsTorrentSlice")
	}

	*o = slice

	return nil
}

// YtsTorrentExists checks if the YtsTorrent row exists.
func YtsTorrentExists(ctx context.Context, exec boil.ContextExecutor, hash string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `yts_torrents` where `hash`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, hash)
	}
	row := exec.QueryRowContext(ctx, sql, hash)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if yts_torrents exists")
	}

	return exists, nil
}

// Exists checks if the YtsTorrent row exists.
func (o *YtsTorrent) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return YtsTorrentExists(ctx, exec, o.Hash)
}
