// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TVEpisode is an object representing the database table.
type TVEpisode struct {
	ID            int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	ShowID        int64     `boil:"show_id" json:"show_id" toml:"show_id" yaml:"show_id"`
	SeasonNumber  int       `boil:"season_number" json:"season_number" toml:"season_number" yaml:"season_number"`
	EpisodeNumber int       `boil:"episode_number" json:"episode_number" toml:"episode_number" yaml:"episode_number"`
	Name          string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Overview      string    `boil:"overview" json:"overview" toml:"overview" yaml:"overview"`
	AirDate       null.Time `boil:"air_date" json:"air_date,omitempty" toml:"air_date" yaml:"air_date,omitempty"`
	Runtime       int       `boil:"runtime" json:"runtime" toml:"runtime" yaml:"runtime"`
	StillPath     string    `boil:"still_path" json:"still_path" toml:"still_path" yaml:"still_path"`
	VoteAverage   float32   `boil:"vote_average" json:"vote_average" toml:"vote_average" yaml:"vote_average"`
	VoteCount     int       `boil:"vote_count" json:"vote_count" toml:"vote_count" yaml:"vote_count"`
	VideoID       int64     `boil:"video_id" json:"video_id" toml:"video_id" yaml:"video_id"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *tvEpisodeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tvEpisodeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TVEpisodeColumns = struct {
	ID            string
	ShowID        string
	SeasonNumber  string
	EpisodeNumber string
	Name          string
	Overview      string
	AirDate       string
	Runtime       string
	StillPath     string
	VoteAverage   string
	VoteCount     string
	VideoID       string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "id",
	ShowID:        "show_id",
	SeasonNumber:  "season_number",
	EpisodeNumber: "episode_number",
	Name:          "name",
	Overview:      "overview",
	AirDate:       "air_date",
	Runtime:       "runtime",
	StillPath:     "still_path",
	VoteAverage:   "vote_average",
	VoteCount:     "vote_count",
	VideoID:       "video_id",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

var TVEpisodeTableColumns = struct {
	ID            string
	ShowID        string
	SeasonNumber  string
	EpisodeNumber string
	Name          string
	Overview      string
	AirDate       string
	Runtime       string
	StillPath     string
	VoteAverage   string
	VoteCount     string
	VideoID       string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "tv_episodes.id",
	ShowID:        "tv_episodes.show_id",
	SeasonNumber:  "tv_episodes.season_number",
	EpisodeNumber: "tv_episodes.episode_number",
	Name:          "tv_episodes.name",
	Overview:      "tv_episodes.overview",
	AirDate:       "tv_episodes.air_date",
	Runtime:       "tv_episodes.runtime",
	StillPath:     "tv_episodes.still_path",
	VoteAverage:   "tv_episodes.vote_average",
	VoteCount:     "tv_episodes.vote_count",
	VideoID:       "tv_episodes.video_id",
	CreatedAt:     "tv_episodes.created_at",
	UpdatedAt:     "tv_episodes.updated_at",
}

// Generated where

var TVEpisodeWhere = struct {
	ID            whereHelperint64
	ShowID        whereHelperint64
	SeasonNumber  whereHelperint
	EpisodeNumber whereHelperint
	Name          whereHelperstring
	Overview      whereHelperstring
	AirDate       whereHelpernull_Time
	Runtime       whereHelperint
	StillPath     whereHelperstring
	VoteAverage   whereHelperfloat32
	VoteCount     whereHelperint
	VideoID       whereHelperint64
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
}{
	ID:            whereHelperint64{field: "`tv_episodes`.`id`"},
	ShowID:        whereHelperint64{field: "`tv_episodes`.`show_id`"},
	SeasonNumber:  whereHelperint{field: "`tv_episodes`.`season_number`"},
	EpisodeNumber: whereHelperint{field: "`tv_episodes`.`episode_number`"},
	Name:          whereHelperstring{field: "`tv_episodes`.`name`"},
	Overview:      whereHelperstring{field: "`tv_episodes`.`overview`"},
	AirDate:       whereHelpernull_Time{field: "`tv_episodes`.`air_date`"},
	Runtime:       whereHelperint{field: "`tv_episodes`.`runtime`"},
	StillPath:     whereHelperstring{field: "`tv_episodes`.`still_path`"},
	VoteAverage:   whereHelperfloat32{field: "`tv_episodes`.`vote_average`"},
	VoteCount:     whereHelperint{field: "`tv_episodes`.`vote_count`"},
	VideoID:       whereHelperint64{field: "`tv_episodes`.`video_id`"},
	CreatedAt:     whereHelpertime_Time{field: "`tv_episodes`.`created_at`"},
	UpdatedAt:     whereHelpertime_Time{field: "`tv_episodes`.`updated_at`"},
}

// TVEpisodeRels is where relationship names are stored.
var TVEpisodeRels = struct {
}{}

// tvEpisodeR is where relationships are stored.
type tvEpisodeR struct {
}

// NewStruct creates a new relationship struct
func (*tvEpisodeR) NewStruct() *tvEpisodeR {
	return &tvEpisodeR{}
}

// tvEpisodeL is where Load methods for each relationship are stored.
type tvEpisodeL struct{}

var (
	tvEpisodeAllColumns            = []string{"id", "show_id", "season_number", "episode_number", "name", "overview", "air_date", "runtime", "still_path", "vote_average", "vote_count", "video_id", "created_at", "updated_at"}
	tvEpisodeColumnsWithoutDefault = []string{"id", "show_id", "season_number", "episode_number", "name", "overview", "air_date", "runtime", "still_path", "vote_average", "vote_count"}
	tvEpisodeColumnsWithDefault    = []string{"video_id", "created_at", "updated_at"}
	tvEpisodePrimaryKeyColumns     = []string{"id"}
	tvEpisodeGeneratedColumns      = []string{}
)

type (
	// TVEpisodeSlice is an alias for a slice of pointers to TVEpisode.
	// This should almost always be used instead of []TVEpisode.
	TVEpisodeSlice []*TVEpisode
	// TVEpisodeHook is the signature for custom TVEpisode hook methods
	TVEpisodeHook func(context.Context, boil.ContextExecutor, *TVEpisode) error

	tvEpisodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tvEpisodeType                 = reflect.TypeOf(&TVEpisode{})
	tvEpisodeMapping              = queries.MakeStructMapping(tvEpisodeType)
	tvEpisodePrimaryKeyMapping, _ = queries.BindMapping(tvEpisodeType, tvEpisodeMapping, tvEpisodePrimaryKeyColumns)
	tvEpisodeInsertCacheMut       sync.RWMutex
	tvEpisodeInsertCache          = make(map[string]insertCache)
	tvEpisodeUpdateCacheMut       sync.RWMutex
	tvEpisodeUpdateCache          = make(map[string]updateCache)
	tvEpisodeUpsertCacheMut       sync.RWMutex
	tvEpisodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tvEpisodeAfterSelectMu sync.Mutex
var tvEpisodeAfterSelectHooks []TVEpisodeHook

var tvEpisodeBeforeInsertMu sync.Mutex
var tvEpisodeBeforeInsertHooks []TVEpisodeHook
var tvEpisodeAfterInsertMu sync.Mutex
var tvEpisodeAfterInsertHooks []TVEpisodeHook

var tvEpisodeBeforeUpdateMu sync.Mutex
var tvEpisodeBeforeUpdateHooks []TVEpisodeHook
var tvEpisodeAfterUpdateMu sync.Mutex
var tvEpisodeAfterUpdateHooks []TVEpisodeHook

var tvEpisodeBeforeDeleteMu sync.Mutex
var tvEpisodeBeforeDeleteHooks []TVEpisodeHook
var tvEpisodeAfterDeleteMu sync.Mutex
var tvEpisodeAfterDeleteHooks []TVEpisodeHook

var tvEpisodeBeforeUpsertMu sync.Mutex
var tvEpisodeBeforeUpsertHooks []TVEpisodeHook
var tvEpisodeAfterUpsertMu sync.Mutex
var tvEpisodeAfterUpsertHooks []TVEpisodeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TVEpisode) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tvEpisodeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TVEpisode) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tvEpisodeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TVEpisode) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tvEpisodeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TVEpisode) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tvEpisodeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TVEpisode) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tvEpisodeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TVEpisode) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tvEpisodeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TVEpisode) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tvEpisodeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TVEpisode) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tvEpisodeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TVEpisode) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tvEpisodeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTVEpisodeHook registers your hook function for all future operations.
func AddTVEpisodeHook(hookPoint boil.HookPoint, tvEpisodeHook TVEpisodeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tvEpisodeAfterSelectMu.Lock()
		tvEpisodeAfterSelectHooks = append(tvEpisodeAfterSelectHooks, tvEpisodeHook)
		tvEpisodeAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		tvEpisodeBeforeInsertMu.Lock()
		tvEpisodeBeforeInsertHooks = append(tvEpisodeBeforeInsertHooks, tvEpisodeHook)
		tvEpisodeBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		tvEpisodeAfterInsertMu.Lock()
		tvEpisodeAfterInsertHooks = append(tvEpisodeAfterInsertHooks, tvEpisodeHook)
		tvEpisodeAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		tvEpisodeBeforeUpdateMu.Lock()
		tvEpisodeBeforeUpdateHooks = append(tvEpisodeBeforeUpdateHooks, tvEpisodeHook)
		tvEpisodeBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		tvEpisodeAfterUpdateMu.Lock()
		tvEpisodeAfterUpdateHooks = append(tvEpisodeAfterUpdateHooks, tvEpisodeHook)
		tvEpisodeAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		tvEpisodeBeforeDeleteMu.Lock()
		tvEpisodeBeforeDeleteHooks = append(tvEpisodeBeforeDeleteHooks, tvEpisodeHook)
		tvEpisodeBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		tvEpisodeAfterDeleteMu.Lock()
		tvEpisodeAfterDeleteHooks = append(tvEpisodeAfterDeleteHooks, tvEpisodeHook)
		tvEpisodeAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		tvEpisodeBeforeUpsertMu.Lock()
		tvEpisodeBeforeUpsertHooks = append(tvEpisodeBeforeUpsertHooks, tvEpisodeHook)
		tvEpisodeBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		tvEpisodeAfterUpsertMu.Lock()
		tvEpisodeAfterUpsertHooks = append(tvEpisodeAfterUpsertHooks, tvEpisodeHook)
		tvEpisodeAfterUpsertMu.Unlock()
	}
}

// One returns a single tvEpisode record from the query.
func (q tvEpisodeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TVEpisode, error) {
	o := &TVEpisode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for tv_episodes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TVEpisode records from the query.
func (q tvEpisodeQuery) All(ctx context.Context, exec boil.ContextExecutor) (TVEpisodeSlice, error) {
	var o []*TVEpisode

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to TVEpisode slice")
	}

	if len(tvEpisodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TVEpisode records in the query.
func (q tvEpisodeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count tv_episodes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tvEpisodeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if tv_episodes exists")
	}

	return count > 0, nil
}

// TVEpisodes retrieves all the records using an executor.
func TVEpisodes(mods ...qm.QueryMod) tvEpisodeQuery {
	mods = append(mods, qm.From("`tv_episodes`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`tv_episodes`.*"})
	}

	return tvEpisodeQuery{q}
}

// FindTVEpisode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTVEpisode(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*TVEpisode, error) {
	tvEpisodeObj := &TVEpisode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `tv_episodes` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tvEpisodeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from tv_episodes")
	}

	if err = tvEpisodeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tvEpisodeObj, err
	}

	return tvEpisodeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TVEpisode) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no tv_episodes provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tvEpisodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tvEpisodeInsertCacheMut.RLock()
	cache, cached := tvEpisodeInsertCache[key]
	tvEpisodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tvEpisodeAllColumns,
			tvEpisodeColumnsWithDefault,
			tvEpisodeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tvEpisodeType, tvEpisodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tvEpisodeType, tvEpisodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `tv_episodes` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `tv_episodes` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `tv_episodes` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, tvEpisodePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into tv_episodes")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for tv_episodes")
	}

CacheNoHooks:
	if !cached {
		tvEpisodeInsertCacheMut.Lock()
		tvEpisodeInsertCache[key] = cache
		tvEpisodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TVEpisode.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TVEpisode) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tvEpisodeUpdateCacheMut.RLock()
	cache, cached := tvEpisodeUpdateCache[key]
	tvEpisodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tvEpisodeAllColumns,
			tvEpisodePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update tv_episodes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `tv_episodes` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, tvEpisodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tvEpisodeType, tvEpisodeMapping, append(wl, tvEpisodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update tv_episodes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for tv_episodes")
	}

	if !cached {
		tvEpisodeUpdateCacheMut.Lock()
		tvEpisodeUpdateCache[key] = cache
		tvEpisodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tvEpisodeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for tv_episodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for tv_episodes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TVEpisodeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tvEpisodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `tv_episodes` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tvEpisodePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in tvEpisode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all tvEpisode")
	}
	return rowsAff, nil
}

var mySQLTVEpisodeUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TVEpisode) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no tv_episodes provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tvEpisodeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTVEpisodeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tvEpisodeUpsertCacheMut.RLock()
	cache, cached := tvEpisodeUpsertCache[key]
	tvEpisodeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			tvEpisodeAllColumns,
			tvEpisodeColumnsWithDefault,
			tvEpisodeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tvEpisodeAllColumns,
			tvEpisodePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert tv_episodes, could not build update column list")
		}

		ret := strmangle.SetComplement(tvEpisodeAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`tv_episodes`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `tv_episodes` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(tvEpisodeType, tvEpisodeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tvEpisodeType, tvEpisodeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for tv_episodes")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(tvEpisodeType, tvEpisodeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for tv_episodes")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for tv_episodes")
	}

CacheNoHooks:
	if !cached {
		tvEpisodeUpsertCacheMut.Lock()
		tvEpisodeUpsertCache[key] = cache
		tvEpisodeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TVEpisode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TVEpisode) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no TVEpisode provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tvEpisodePrimaryKeyMapping)
	sql := "DELETE FROM `tv_episodes` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from tv_episodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for tv_episodes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tvEpisodeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no tvEpisodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from tv_episodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for tv_episodes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TVEpisodeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tvEpisodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tvEpisodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `tv_episodes` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tvEpisodePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from tvEpisode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for tv_episodes")
	}

	if len(tvEpisodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TVEpisode) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTVEpisode(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TVEpisodeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TVEpisodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tvEpisodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `tv_episodes`.* FROM `tv_episodes` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tvEpisodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in TVEpisodeSlice")
	}

	*o = slice

	return nil
}

// TVEpisodeExists checks if the TVEpisode row exists.
func TVEpisodeExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `tv_episodes` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if tv_episodes exists")
	}

	return exists, nil
}

// Exists checks if the TVEpisode row exists.
func (o *TVEpisode) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TVEpisodeExists(ctx, exec, o.ID)
}
