// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"strconv"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/strmangle"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("dbmodels: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

type LatestShowsType string

// Enum values for LatestShowsType
const (
	LatestShowsTypeMovie    LatestShowsType = "movie"
	LatestShowsTypeTVSeries LatestShowsType = "tv-series"
	LatestShowsTypeEpisode  LatestShowsType = "episode"
)

func AllLatestShowsType() []LatestShowsType {
	return []LatestShowsType{
		LatestShowsTypeMovie,
		LatestShowsTypeTVSeries,
		LatestShowsTypeEpisode,
	}
}

func (e LatestShowsType) IsValid() error {
	switch e {
	case LatestShowsTypeMovie, LatestShowsTypeTVSeries, LatestShowsTypeEpisode:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e LatestShowsType) String() string {
	return string(e)
}

func (e LatestShowsType) Ordinal() int {
	switch e {
	case LatestShowsTypeMovie:
		return 0
	case LatestShowsTypeTVSeries:
		return 1
	case LatestShowsTypeEpisode:
		return 2

	default:
		panic(errors.New("enum is not valid"))
	}
}

type ShowsType string

// Enum values for ShowsType
const (
	ShowsTypeMovie  ShowsType = "movie"
	ShowsTypeSeries ShowsType = "series"
)

func AllShowsType() []ShowsType {
	return []ShowsType{
		ShowsTypeMovie,
		ShowsTypeSeries,
	}
}

func (e ShowsType) IsValid() error {
	switch e {
	case ShowsTypeMovie, ShowsTypeSeries:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e ShowsType) String() string {
	return string(e)
}

func (e ShowsType) Ordinal() int {
	switch e {
	case ShowsTypeMovie:
		return 0
	case ShowsTypeSeries:
		return 1

	default:
		panic(errors.New("enum is not valid"))
	}
}
