// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TVSeason is an object representing the database table.
type TVSeason struct {
	ID                     int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	ShowID                 int64     `boil:"show_id" json:"show_id" toml:"show_id" yaml:"show_id"`
	SeasonNumber           int       `boil:"season_number" json:"season_number" toml:"season_number" yaml:"season_number"`
	Name                   string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	PosterPath             string    `boil:"poster_path" json:"poster_path" toml:"poster_path" yaml:"poster_path"`
	Overview               string    `boil:"overview" json:"overview" toml:"overview" yaml:"overview"`
	AirDate                null.Time `boil:"air_date" json:"air_date,omitempty" toml:"air_date" yaml:"air_date,omitempty"`
	VoteAverage            float32   `boil:"vote_average" json:"vote_average" toml:"vote_average" yaml:"vote_average"`
	TotalEpisodes          int       `boil:"total_episodes" json:"total_episodes" toml:"total_episodes" yaml:"total_episodes"`
	CreatedAt              time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt              time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CountAvailableEpisodes int       `boil:"count_available_episodes" json:"count_available_episodes" toml:"count_available_episodes" yaml:"count_available_episodes"`

	R *tvSeasonR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tvSeasonL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TVSeasonColumns = struct {
	ID                     string
	ShowID                 string
	SeasonNumber           string
	Name                   string
	PosterPath             string
	Overview               string
	AirDate                string
	VoteAverage            string
	TotalEpisodes          string
	CreatedAt              string
	UpdatedAt              string
	CountAvailableEpisodes string
}{
	ID:                     "id",
	ShowID:                 "show_id",
	SeasonNumber:           "season_number",
	Name:                   "name",
	PosterPath:             "poster_path",
	Overview:               "overview",
	AirDate:                "air_date",
	VoteAverage:            "vote_average",
	TotalEpisodes:          "total_episodes",
	CreatedAt:              "created_at",
	UpdatedAt:              "updated_at",
	CountAvailableEpisodes: "count_available_episodes",
}

var TVSeasonTableColumns = struct {
	ID                     string
	ShowID                 string
	SeasonNumber           string
	Name                   string
	PosterPath             string
	Overview               string
	AirDate                string
	VoteAverage            string
	TotalEpisodes          string
	CreatedAt              string
	UpdatedAt              string
	CountAvailableEpisodes string
}{
	ID:                     "tv_seasons.id",
	ShowID:                 "tv_seasons.show_id",
	SeasonNumber:           "tv_seasons.season_number",
	Name:                   "tv_seasons.name",
	PosterPath:             "tv_seasons.poster_path",
	Overview:               "tv_seasons.overview",
	AirDate:                "tv_seasons.air_date",
	VoteAverage:            "tv_seasons.vote_average",
	TotalEpisodes:          "tv_seasons.total_episodes",
	CreatedAt:              "tv_seasons.created_at",
	UpdatedAt:              "tv_seasons.updated_at",
	CountAvailableEpisodes: "tv_seasons.count_available_episodes",
}

// Generated where

var TVSeasonWhere = struct {
	ID                     whereHelperint64
	ShowID                 whereHelperint64
	SeasonNumber           whereHelperint
	Name                   whereHelperstring
	PosterPath             whereHelperstring
	Overview               whereHelperstring
	AirDate                whereHelpernull_Time
	VoteAverage            whereHelperfloat32
	TotalEpisodes          whereHelperint
	CreatedAt              whereHelpertime_Time
	UpdatedAt              whereHelpertime_Time
	CountAvailableEpisodes whereHelperint
}{
	ID:                     whereHelperint64{field: "`tv_seasons`.`id`"},
	ShowID:                 whereHelperint64{field: "`tv_seasons`.`show_id`"},
	SeasonNumber:           whereHelperint{field: "`tv_seasons`.`season_number`"},
	Name:                   whereHelperstring{field: "`tv_seasons`.`name`"},
	PosterPath:             whereHelperstring{field: "`tv_seasons`.`poster_path`"},
	Overview:               whereHelperstring{field: "`tv_seasons`.`overview`"},
	AirDate:                whereHelpernull_Time{field: "`tv_seasons`.`air_date`"},
	VoteAverage:            whereHelperfloat32{field: "`tv_seasons`.`vote_average`"},
	TotalEpisodes:          whereHelperint{field: "`tv_seasons`.`total_episodes`"},
	CreatedAt:              whereHelpertime_Time{field: "`tv_seasons`.`created_at`"},
	UpdatedAt:              whereHelpertime_Time{field: "`tv_seasons`.`updated_at`"},
	CountAvailableEpisodes: whereHelperint{field: "`tv_seasons`.`count_available_episodes`"},
}

// TVSeasonRels is where relationship names are stored.
var TVSeasonRels = struct {
	Show string
}{
	Show: "Show",
}

// tvSeasonR is where relationships are stored.
type tvSeasonR struct {
	Show *TVSeriesShow `boil:"Show" json:"Show" toml:"Show" yaml:"Show"`
}

// NewStruct creates a new relationship struct
func (*tvSeasonR) NewStruct() *tvSeasonR {
	return &tvSeasonR{}
}

func (r *tvSeasonR) GetShow() *TVSeriesShow {
	if r == nil {
		return nil
	}
	return r.Show
}

// tvSeasonL is where Load methods for each relationship are stored.
type tvSeasonL struct{}

var (
	tvSeasonAllColumns            = []string{"id", "show_id", "season_number", "name", "poster_path", "overview", "air_date", "vote_average", "total_episodes", "created_at", "updated_at", "count_available_episodes"}
	tvSeasonColumnsWithoutDefault = []string{"id", "show_id", "season_number", "name", "poster_path", "overview", "air_date", "vote_average", "total_episodes"}
	tvSeasonColumnsWithDefault    = []string{"created_at", "updated_at", "count_available_episodes"}
	tvSeasonPrimaryKeyColumns     = []string{"id"}
	tvSeasonGeneratedColumns      = []string{}
)

type (
	// TVSeasonSlice is an alias for a slice of pointers to TVSeason.
	// This should almost always be used instead of []TVSeason.
	TVSeasonSlice []*TVSeason
	// TVSeasonHook is the signature for custom TVSeason hook methods
	TVSeasonHook func(context.Context, boil.ContextExecutor, *TVSeason) error

	tvSeasonQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tvSeasonType                 = reflect.TypeOf(&TVSeason{})
	tvSeasonMapping              = queries.MakeStructMapping(tvSeasonType)
	tvSeasonPrimaryKeyMapping, _ = queries.BindMapping(tvSeasonType, tvSeasonMapping, tvSeasonPrimaryKeyColumns)
	tvSeasonInsertCacheMut       sync.RWMutex
	tvSeasonInsertCache          = make(map[string]insertCache)
	tvSeasonUpdateCacheMut       sync.RWMutex
	tvSeasonUpdateCache          = make(map[string]updateCache)
	tvSeasonUpsertCacheMut       sync.RWMutex
	tvSeasonUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tvSeasonAfterSelectMu sync.Mutex
var tvSeasonAfterSelectHooks []TVSeasonHook

var tvSeasonBeforeInsertMu sync.Mutex
var tvSeasonBeforeInsertHooks []TVSeasonHook
var tvSeasonAfterInsertMu sync.Mutex
var tvSeasonAfterInsertHooks []TVSeasonHook

var tvSeasonBeforeUpdateMu sync.Mutex
var tvSeasonBeforeUpdateHooks []TVSeasonHook
var tvSeasonAfterUpdateMu sync.Mutex
var tvSeasonAfterUpdateHooks []TVSeasonHook

var tvSeasonBeforeDeleteMu sync.Mutex
var tvSeasonBeforeDeleteHooks []TVSeasonHook
var tvSeasonAfterDeleteMu sync.Mutex
var tvSeasonAfterDeleteHooks []TVSeasonHook

var tvSeasonBeforeUpsertMu sync.Mutex
var tvSeasonBeforeUpsertHooks []TVSeasonHook
var tvSeasonAfterUpsertMu sync.Mutex
var tvSeasonAfterUpsertHooks []TVSeasonHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TVSeason) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tvSeasonAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TVSeason) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tvSeasonBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TVSeason) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tvSeasonAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TVSeason) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tvSeasonBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TVSeason) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tvSeasonAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TVSeason) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tvSeasonBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TVSeason) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tvSeasonAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TVSeason) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tvSeasonBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TVSeason) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tvSeasonAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTVSeasonHook registers your hook function for all future operations.
func AddTVSeasonHook(hookPoint boil.HookPoint, tvSeasonHook TVSeasonHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tvSeasonAfterSelectMu.Lock()
		tvSeasonAfterSelectHooks = append(tvSeasonAfterSelectHooks, tvSeasonHook)
		tvSeasonAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		tvSeasonBeforeInsertMu.Lock()
		tvSeasonBeforeInsertHooks = append(tvSeasonBeforeInsertHooks, tvSeasonHook)
		tvSeasonBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		tvSeasonAfterInsertMu.Lock()
		tvSeasonAfterInsertHooks = append(tvSeasonAfterInsertHooks, tvSeasonHook)
		tvSeasonAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		tvSeasonBeforeUpdateMu.Lock()
		tvSeasonBeforeUpdateHooks = append(tvSeasonBeforeUpdateHooks, tvSeasonHook)
		tvSeasonBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		tvSeasonAfterUpdateMu.Lock()
		tvSeasonAfterUpdateHooks = append(tvSeasonAfterUpdateHooks, tvSeasonHook)
		tvSeasonAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		tvSeasonBeforeDeleteMu.Lock()
		tvSeasonBeforeDeleteHooks = append(tvSeasonBeforeDeleteHooks, tvSeasonHook)
		tvSeasonBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		tvSeasonAfterDeleteMu.Lock()
		tvSeasonAfterDeleteHooks = append(tvSeasonAfterDeleteHooks, tvSeasonHook)
		tvSeasonAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		tvSeasonBeforeUpsertMu.Lock()
		tvSeasonBeforeUpsertHooks = append(tvSeasonBeforeUpsertHooks, tvSeasonHook)
		tvSeasonBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		tvSeasonAfterUpsertMu.Lock()
		tvSeasonAfterUpsertHooks = append(tvSeasonAfterUpsertHooks, tvSeasonHook)
		tvSeasonAfterUpsertMu.Unlock()
	}
}

// One returns a single tvSeason record from the query.
func (q tvSeasonQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TVSeason, error) {
	o := &TVSeason{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for tv_seasons")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TVSeason records from the query.
func (q tvSeasonQuery) All(ctx context.Context, exec boil.ContextExecutor) (TVSeasonSlice, error) {
	var o []*TVSeason

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to TVSeason slice")
	}

	if len(tvSeasonAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TVSeason records in the query.
func (q tvSeasonQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count tv_seasons rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tvSeasonQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if tv_seasons exists")
	}

	return count > 0, nil
}

// Show pointed to by the foreign key.
func (o *TVSeason) Show(mods ...qm.QueryMod) tvSeriesShowQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ShowID),
	}

	queryMods = append(queryMods, mods...)

	return TVSeriesShows(queryMods...)
}

// LoadShow allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tvSeasonL) LoadShow(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTVSeason interface{}, mods queries.Applicator) error {
	var slice []*TVSeason
	var object *TVSeason

	if singular {
		var ok bool
		object, ok = maybeTVSeason.(*TVSeason)
		if !ok {
			object = new(TVSeason)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTVSeason)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTVSeason))
			}
		}
	} else {
		s, ok := maybeTVSeason.(*[]*TVSeason)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTVSeason)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTVSeason))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tvSeasonR{}
		}
		args[object.ShowID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tvSeasonR{}
			}

			args[obj.ShowID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tv_series_shows`),
		qm.WhereIn(`tv_series_shows.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TVSeriesShow")
	}

	var resultSlice []*TVSeriesShow
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TVSeriesShow")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tv_series_shows")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tv_series_shows")
	}

	if len(tvSeriesShowAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Show = foreign
		if foreign.R == nil {
			foreign.R = &tvSeriesShowR{}
		}
		foreign.R.ShowTVSeasons = append(foreign.R.ShowTVSeasons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ShowID == foreign.ID {
				local.R.Show = foreign
				if foreign.R == nil {
					foreign.R = &tvSeriesShowR{}
				}
				foreign.R.ShowTVSeasons = append(foreign.R.ShowTVSeasons, local)
				break
			}
		}
	}

	return nil
}

// SetShow of the tvSeason to the related item.
// Sets o.R.Show to related.
// Adds o to related.R.ShowTVSeasons.
func (o *TVSeason) SetShow(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TVSeriesShow) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `tv_seasons` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"show_id"}),
		strmangle.WhereClause("`", "`", 0, tvSeasonPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ShowID = related.ID
	if o.R == nil {
		o.R = &tvSeasonR{
			Show: related,
		}
	} else {
		o.R.Show = related
	}

	if related.R == nil {
		related.R = &tvSeriesShowR{
			ShowTVSeasons: TVSeasonSlice{o},
		}
	} else {
		related.R.ShowTVSeasons = append(related.R.ShowTVSeasons, o)
	}

	return nil
}

// TVSeasons retrieves all the records using an executor.
func TVSeasons(mods ...qm.QueryMod) tvSeasonQuery {
	mods = append(mods, qm.From("`tv_seasons`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`tv_seasons`.*"})
	}

	return tvSeasonQuery{q}
}

// FindTVSeason retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTVSeason(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*TVSeason, error) {
	tvSeasonObj := &TVSeason{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `tv_seasons` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tvSeasonObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from tv_seasons")
	}

	if err = tvSeasonObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tvSeasonObj, err
	}

	return tvSeasonObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TVSeason) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no tv_seasons provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tvSeasonColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tvSeasonInsertCacheMut.RLock()
	cache, cached := tvSeasonInsertCache[key]
	tvSeasonInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tvSeasonAllColumns,
			tvSeasonColumnsWithDefault,
			tvSeasonColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tvSeasonType, tvSeasonMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tvSeasonType, tvSeasonMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `tv_seasons` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `tv_seasons` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `tv_seasons` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, tvSeasonPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into tv_seasons")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for tv_seasons")
	}

CacheNoHooks:
	if !cached {
		tvSeasonInsertCacheMut.Lock()
		tvSeasonInsertCache[key] = cache
		tvSeasonInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TVSeason.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TVSeason) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tvSeasonUpdateCacheMut.RLock()
	cache, cached := tvSeasonUpdateCache[key]
	tvSeasonUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tvSeasonAllColumns,
			tvSeasonPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update tv_seasons, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `tv_seasons` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, tvSeasonPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tvSeasonType, tvSeasonMapping, append(wl, tvSeasonPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update tv_seasons row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for tv_seasons")
	}

	if !cached {
		tvSeasonUpdateCacheMut.Lock()
		tvSeasonUpdateCache[key] = cache
		tvSeasonUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tvSeasonQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for tv_seasons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for tv_seasons")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TVSeasonSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tvSeasonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `tv_seasons` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tvSeasonPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in tvSeason slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all tvSeason")
	}
	return rowsAff, nil
}

var mySQLTVSeasonUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TVSeason) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no tv_seasons provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tvSeasonColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTVSeasonUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tvSeasonUpsertCacheMut.RLock()
	cache, cached := tvSeasonUpsertCache[key]
	tvSeasonUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			tvSeasonAllColumns,
			tvSeasonColumnsWithDefault,
			tvSeasonColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tvSeasonAllColumns,
			tvSeasonPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert tv_seasons, could not build update column list")
		}

		ret := strmangle.SetComplement(tvSeasonAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`tv_seasons`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `tv_seasons` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(tvSeasonType, tvSeasonMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tvSeasonType, tvSeasonMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for tv_seasons")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(tvSeasonType, tvSeasonMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for tv_seasons")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for tv_seasons")
	}

CacheNoHooks:
	if !cached {
		tvSeasonUpsertCacheMut.Lock()
		tvSeasonUpsertCache[key] = cache
		tvSeasonUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TVSeason record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TVSeason) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no TVSeason provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tvSeasonPrimaryKeyMapping)
	sql := "DELETE FROM `tv_seasons` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from tv_seasons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for tv_seasons")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tvSeasonQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no tvSeasonQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from tv_seasons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for tv_seasons")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TVSeasonSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tvSeasonBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tvSeasonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `tv_seasons` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tvSeasonPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from tvSeason slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for tv_seasons")
	}

	if len(tvSeasonAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TVSeason) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTVSeason(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TVSeasonSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TVSeasonSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tvSeasonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `tv_seasons`.* FROM `tv_seasons` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tvSeasonPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in TVSeasonSlice")
	}

	*o = slice

	return nil
}

// TVSeasonExists checks if the TVSeason row exists.
func TVSeasonExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `tv_seasons` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if tv_seasons exists")
	}

	return exists, nil
}

// Exists checks if the TVSeason row exists.
func (o *TVSeason) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TVSeasonExists(ctx, exec, o.ID)
}
