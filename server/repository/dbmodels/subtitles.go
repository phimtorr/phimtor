// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Subtitle is an object representing the database table.
type Subtitle struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Language  string    `boil:"language" json:"language" toml:"language" yaml:"language"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Owner     string    `boil:"owner" json:"owner" toml:"owner" yaml:"owner"`
	Link      string    `boil:"link" json:"link" toml:"link" yaml:"link"`
	ShowID    null.Int  `boil:"show_id" json:"show_id,omitempty" toml:"show_id" yaml:"show_id,omitempty"`
	EpisodeID null.Int  `boil:"episode_id" json:"episode_id,omitempty" toml:"episode_id" yaml:"episode_id,omitempty"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *subtitleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L subtitleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SubtitleColumns = struct {
	ID        string
	Language  string
	Name      string
	Owner     string
	Link      string
	ShowID    string
	EpisodeID string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Language:  "language",
	Name:      "name",
	Owner:     "owner",
	Link:      "link",
	ShowID:    "show_id",
	EpisodeID: "episode_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var SubtitleTableColumns = struct {
	ID        string
	Language  string
	Name      string
	Owner     string
	Link      string
	ShowID    string
	EpisodeID string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "subtitles.id",
	Language:  "subtitles.language",
	Name:      "subtitles.name",
	Owner:     "subtitles.owner",
	Link:      "subtitles.link",
	ShowID:    "subtitles.show_id",
	EpisodeID: "subtitles.episode_id",
	CreatedAt: "subtitles.created_at",
	UpdatedAt: "subtitles.updated_at",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var SubtitleWhere = struct {
	ID        whereHelperint64
	Language  whereHelperstring
	Name      whereHelperstring
	Owner     whereHelperstring
	Link      whereHelperstring
	ShowID    whereHelpernull_Int
	EpisodeID whereHelpernull_Int
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: "\"subtitles\".\"id\""},
	Language:  whereHelperstring{field: "\"subtitles\".\"language\""},
	Name:      whereHelperstring{field: "\"subtitles\".\"name\""},
	Owner:     whereHelperstring{field: "\"subtitles\".\"owner\""},
	Link:      whereHelperstring{field: "\"subtitles\".\"link\""},
	ShowID:    whereHelpernull_Int{field: "\"subtitles\".\"show_id\""},
	EpisodeID: whereHelpernull_Int{field: "\"subtitles\".\"episode_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"subtitles\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"subtitles\".\"updated_at\""},
}

// SubtitleRels is where relationship names are stored.
var SubtitleRels = struct {
	Episode string
	Show    string
}{
	Episode: "Episode",
	Show:    "Show",
}

// subtitleR is where relationships are stored.
type subtitleR struct {
	Episode *Episode `boil:"Episode" json:"Episode" toml:"Episode" yaml:"Episode"`
	Show    *Show    `boil:"Show" json:"Show" toml:"Show" yaml:"Show"`
}

// NewStruct creates a new relationship struct
func (*subtitleR) NewStruct() *subtitleR {
	return &subtitleR{}
}

func (r *subtitleR) GetEpisode() *Episode {
	if r == nil {
		return nil
	}
	return r.Episode
}

func (r *subtitleR) GetShow() *Show {
	if r == nil {
		return nil
	}
	return r.Show
}

// subtitleL is where Load methods for each relationship are stored.
type subtitleL struct{}

var (
	subtitleAllColumns            = []string{"id", "language", "name", "owner", "link", "show_id", "episode_id", "created_at", "updated_at"}
	subtitleColumnsWithoutDefault = []string{"language", "name", "owner", "link"}
	subtitleColumnsWithDefault    = []string{"id", "show_id", "episode_id", "created_at", "updated_at"}
	subtitlePrimaryKeyColumns     = []string{"id"}
	subtitleGeneratedColumns      = []string{}
)

type (
	// SubtitleSlice is an alias for a slice of pointers to Subtitle.
	// This should almost always be used instead of []Subtitle.
	SubtitleSlice []*Subtitle
	// SubtitleHook is the signature for custom Subtitle hook methods
	SubtitleHook func(context.Context, boil.ContextExecutor, *Subtitle) error

	subtitleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	subtitleType                 = reflect.TypeOf(&Subtitle{})
	subtitleMapping              = queries.MakeStructMapping(subtitleType)
	subtitlePrimaryKeyMapping, _ = queries.BindMapping(subtitleType, subtitleMapping, subtitlePrimaryKeyColumns)
	subtitleInsertCacheMut       sync.RWMutex
	subtitleInsertCache          = make(map[string]insertCache)
	subtitleUpdateCacheMut       sync.RWMutex
	subtitleUpdateCache          = make(map[string]updateCache)
	subtitleUpsertCacheMut       sync.RWMutex
	subtitleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var subtitleAfterSelectMu sync.Mutex
var subtitleAfterSelectHooks []SubtitleHook

var subtitleBeforeInsertMu sync.Mutex
var subtitleBeforeInsertHooks []SubtitleHook
var subtitleAfterInsertMu sync.Mutex
var subtitleAfterInsertHooks []SubtitleHook

var subtitleBeforeUpdateMu sync.Mutex
var subtitleBeforeUpdateHooks []SubtitleHook
var subtitleAfterUpdateMu sync.Mutex
var subtitleAfterUpdateHooks []SubtitleHook

var subtitleBeforeDeleteMu sync.Mutex
var subtitleBeforeDeleteHooks []SubtitleHook
var subtitleAfterDeleteMu sync.Mutex
var subtitleAfterDeleteHooks []SubtitleHook

var subtitleBeforeUpsertMu sync.Mutex
var subtitleBeforeUpsertHooks []SubtitleHook
var subtitleAfterUpsertMu sync.Mutex
var subtitleAfterUpsertHooks []SubtitleHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Subtitle) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subtitleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Subtitle) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subtitleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Subtitle) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subtitleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Subtitle) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subtitleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Subtitle) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subtitleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Subtitle) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subtitleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Subtitle) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subtitleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Subtitle) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subtitleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Subtitle) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subtitleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSubtitleHook registers your hook function for all future operations.
func AddSubtitleHook(hookPoint boil.HookPoint, subtitleHook SubtitleHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		subtitleAfterSelectMu.Lock()
		subtitleAfterSelectHooks = append(subtitleAfterSelectHooks, subtitleHook)
		subtitleAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		subtitleBeforeInsertMu.Lock()
		subtitleBeforeInsertHooks = append(subtitleBeforeInsertHooks, subtitleHook)
		subtitleBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		subtitleAfterInsertMu.Lock()
		subtitleAfterInsertHooks = append(subtitleAfterInsertHooks, subtitleHook)
		subtitleAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		subtitleBeforeUpdateMu.Lock()
		subtitleBeforeUpdateHooks = append(subtitleBeforeUpdateHooks, subtitleHook)
		subtitleBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		subtitleAfterUpdateMu.Lock()
		subtitleAfterUpdateHooks = append(subtitleAfterUpdateHooks, subtitleHook)
		subtitleAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		subtitleBeforeDeleteMu.Lock()
		subtitleBeforeDeleteHooks = append(subtitleBeforeDeleteHooks, subtitleHook)
		subtitleBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		subtitleAfterDeleteMu.Lock()
		subtitleAfterDeleteHooks = append(subtitleAfterDeleteHooks, subtitleHook)
		subtitleAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		subtitleBeforeUpsertMu.Lock()
		subtitleBeforeUpsertHooks = append(subtitleBeforeUpsertHooks, subtitleHook)
		subtitleBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		subtitleAfterUpsertMu.Lock()
		subtitleAfterUpsertHooks = append(subtitleAfterUpsertHooks, subtitleHook)
		subtitleAfterUpsertMu.Unlock()
	}
}

// One returns a single subtitle record from the query.
func (q subtitleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Subtitle, error) {
	o := &Subtitle{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for subtitles")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Subtitle records from the query.
func (q subtitleQuery) All(ctx context.Context, exec boil.ContextExecutor) (SubtitleSlice, error) {
	var o []*Subtitle

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to Subtitle slice")
	}

	if len(subtitleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Subtitle records in the query.
func (q subtitleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count subtitles rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q subtitleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if subtitles exists")
	}

	return count > 0, nil
}

// Episode pointed to by the foreign key.
func (o *Subtitle) Episode(mods ...qm.QueryMod) episodeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.EpisodeID),
	}

	queryMods = append(queryMods, mods...)

	return Episodes(queryMods...)
}

// Show pointed to by the foreign key.
func (o *Subtitle) Show(mods ...qm.QueryMod) showQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ShowID),
	}

	queryMods = append(queryMods, mods...)

	return Shows(queryMods...)
}

// LoadEpisode allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (subtitleL) LoadEpisode(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubtitle interface{}, mods queries.Applicator) error {
	var slice []*Subtitle
	var object *Subtitle

	if singular {
		var ok bool
		object, ok = maybeSubtitle.(*Subtitle)
		if !ok {
			object = new(Subtitle)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSubtitle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSubtitle))
			}
		}
	} else {
		s, ok := maybeSubtitle.(*[]*Subtitle)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSubtitle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSubtitle))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &subtitleR{}
		}
		if !queries.IsNil(object.EpisodeID) {
			args[object.EpisodeID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subtitleR{}
			}

			if !queries.IsNil(obj.EpisodeID) {
				args[obj.EpisodeID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`episodes`),
		qm.WhereIn(`episodes.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Episode")
	}

	var resultSlice []*Episode
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Episode")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for episodes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for episodes")
	}

	if len(episodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Episode = foreign
		if foreign.R == nil {
			foreign.R = &episodeR{}
		}
		foreign.R.Subtitles = append(foreign.R.Subtitles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.EpisodeID, foreign.ID) {
				local.R.Episode = foreign
				if foreign.R == nil {
					foreign.R = &episodeR{}
				}
				foreign.R.Subtitles = append(foreign.R.Subtitles, local)
				break
			}
		}
	}

	return nil
}

// LoadShow allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (subtitleL) LoadShow(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubtitle interface{}, mods queries.Applicator) error {
	var slice []*Subtitle
	var object *Subtitle

	if singular {
		var ok bool
		object, ok = maybeSubtitle.(*Subtitle)
		if !ok {
			object = new(Subtitle)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSubtitle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSubtitle))
			}
		}
	} else {
		s, ok := maybeSubtitle.(*[]*Subtitle)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSubtitle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSubtitle))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &subtitleR{}
		}
		if !queries.IsNil(object.ShowID) {
			args[object.ShowID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subtitleR{}
			}

			if !queries.IsNil(obj.ShowID) {
				args[obj.ShowID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`shows`),
		qm.WhereIn(`shows.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Show")
	}

	var resultSlice []*Show
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Show")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shows")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shows")
	}

	if len(showAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Show = foreign
		if foreign.R == nil {
			foreign.R = &showR{}
		}
		foreign.R.Subtitles = append(foreign.R.Subtitles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ShowID, foreign.ID) {
				local.R.Show = foreign
				if foreign.R == nil {
					foreign.R = &showR{}
				}
				foreign.R.Subtitles = append(foreign.R.Subtitles, local)
				break
			}
		}
	}

	return nil
}

// SetEpisode of the subtitle to the related item.
// Sets o.R.Episode to related.
// Adds o to related.R.Subtitles.
func (o *Subtitle) SetEpisode(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Episode) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"subtitles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"episode_id"}),
		strmangle.WhereClause("\"", "\"", 2, subtitlePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.EpisodeID, related.ID)
	if o.R == nil {
		o.R = &subtitleR{
			Episode: related,
		}
	} else {
		o.R.Episode = related
	}

	if related.R == nil {
		related.R = &episodeR{
			Subtitles: SubtitleSlice{o},
		}
	} else {
		related.R.Subtitles = append(related.R.Subtitles, o)
	}

	return nil
}

// RemoveEpisode relationship.
// Sets o.R.Episode to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Subtitle) RemoveEpisode(ctx context.Context, exec boil.ContextExecutor, related *Episode) error {
	var err error

	queries.SetScanner(&o.EpisodeID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("episode_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Episode = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Subtitles {
		if queries.Equal(o.EpisodeID, ri.EpisodeID) {
			continue
		}

		ln := len(related.R.Subtitles)
		if ln > 1 && i < ln-1 {
			related.R.Subtitles[i] = related.R.Subtitles[ln-1]
		}
		related.R.Subtitles = related.R.Subtitles[:ln-1]
		break
	}
	return nil
}

// SetShow of the subtitle to the related item.
// Sets o.R.Show to related.
// Adds o to related.R.Subtitles.
func (o *Subtitle) SetShow(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Show) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"subtitles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"show_id"}),
		strmangle.WhereClause("\"", "\"", 2, subtitlePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ShowID, related.ID)
	if o.R == nil {
		o.R = &subtitleR{
			Show: related,
		}
	} else {
		o.R.Show = related
	}

	if related.R == nil {
		related.R = &showR{
			Subtitles: SubtitleSlice{o},
		}
	} else {
		related.R.Subtitles = append(related.R.Subtitles, o)
	}

	return nil
}

// RemoveShow relationship.
// Sets o.R.Show to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Subtitle) RemoveShow(ctx context.Context, exec boil.ContextExecutor, related *Show) error {
	var err error

	queries.SetScanner(&o.ShowID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("show_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Show = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Subtitles {
		if queries.Equal(o.ShowID, ri.ShowID) {
			continue
		}

		ln := len(related.R.Subtitles)
		if ln > 1 && i < ln-1 {
			related.R.Subtitles[i] = related.R.Subtitles[ln-1]
		}
		related.R.Subtitles = related.R.Subtitles[:ln-1]
		break
	}
	return nil
}

// Subtitles retrieves all the records using an executor.
func Subtitles(mods ...qm.QueryMod) subtitleQuery {
	mods = append(mods, qm.From("\"subtitles\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"subtitles\".*"})
	}

	return subtitleQuery{q}
}

// FindSubtitle retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSubtitle(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Subtitle, error) {
	subtitleObj := &Subtitle{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"subtitles\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, subtitleObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from subtitles")
	}

	if err = subtitleObj.doAfterSelectHooks(ctx, exec); err != nil {
		return subtitleObj, err
	}

	return subtitleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Subtitle) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no subtitles provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(subtitleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	subtitleInsertCacheMut.RLock()
	cache, cached := subtitleInsertCache[key]
	subtitleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			subtitleAllColumns,
			subtitleColumnsWithDefault,
			subtitleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(subtitleType, subtitleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(subtitleType, subtitleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"subtitles\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"subtitles\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into subtitles")
	}

	if !cached {
		subtitleInsertCacheMut.Lock()
		subtitleInsertCache[key] = cache
		subtitleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Subtitle.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Subtitle) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	subtitleUpdateCacheMut.RLock()
	cache, cached := subtitleUpdateCache[key]
	subtitleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			subtitleAllColumns,
			subtitlePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update subtitles, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"subtitles\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, subtitlePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(subtitleType, subtitleMapping, append(wl, subtitlePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update subtitles row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for subtitles")
	}

	if !cached {
		subtitleUpdateCacheMut.Lock()
		subtitleUpdateCache[key] = cache
		subtitleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q subtitleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for subtitles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for subtitles")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SubtitleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subtitlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"subtitles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, subtitlePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in subtitle slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all subtitle")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Subtitle) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no subtitles provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(subtitleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	subtitleUpsertCacheMut.RLock()
	cache, cached := subtitleUpsertCache[key]
	subtitleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			subtitleAllColumns,
			subtitleColumnsWithDefault,
			subtitleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			subtitleAllColumns,
			subtitlePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert subtitles, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(subtitlePrimaryKeyColumns))
			copy(conflict, subtitlePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"subtitles\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(subtitleType, subtitleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(subtitleType, subtitleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert subtitles")
	}

	if !cached {
		subtitleUpsertCacheMut.Lock()
		subtitleUpsertCache[key] = cache
		subtitleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Subtitle record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Subtitle) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no Subtitle provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), subtitlePrimaryKeyMapping)
	sql := "DELETE FROM \"subtitles\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from subtitles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for subtitles")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q subtitleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no subtitleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from subtitles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for subtitles")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SubtitleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(subtitleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subtitlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"subtitles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, subtitlePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from subtitle slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for subtitles")
	}

	if len(subtitleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Subtitle) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSubtitle(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SubtitleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SubtitleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subtitlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"subtitles\".* FROM \"subtitles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, subtitlePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in SubtitleSlice")
	}

	*o = slice

	return nil
}

// SubtitleExists checks if the Subtitle row exists.
func SubtitleExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"subtitles\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if subtitles exists")
	}

	return exists, nil
}

// Exists checks if the Subtitle row exists.
func (o *Subtitle) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SubtitleExists(ctx, exec, o.ID)
}
