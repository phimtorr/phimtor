// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Show is an object representing the database table.
type Show struct {
	ID    int64    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Type  ShowType `boil:"type" json:"type" toml:"type" yaml:"type"`
	Title string   `boil:"title" json:"title" toml:"title" yaml:"title"`
	OriginalTitle     string    `boil:"original_title" json:"original_title" toml:"original_title" yaml:"original_title"`
	PosterLink        string    `boil:"poster_link" json:"poster_link" toml:"poster_link" yaml:"poster_link"`
	Description       string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	ReleaseYear       int       `boil:"release_year" json:"release_year" toml:"release_year" yaml:"release_year"`
	Score             float32   `boil:"score" json:"score" toml:"score" yaml:"score"`
	DurationInMinutes int       `boil:"duration_in_minutes" json:"duration_in_minutes" toml:"duration_in_minutes" yaml:"duration_in_minutes"`
	Quantity          string    `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`
	TotalEpisodes     int       `boil:"total_episodes" json:"total_episodes" toml:"total_episodes" yaml:"total_episodes"`
	CurrentEpisode    int       `boil:"current_episode" json:"current_episode" toml:"current_episode" yaml:"current_episode"`
	CreatedAt         time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt         time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *showR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L showL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShowColumns = struct {
	ID                string
	Type              string
	Title             string
	OriginalTitle     string
	PosterLink        string
	Description       string
	ReleaseYear       string
	Score             string
	DurationInMinutes string
	Quantity          string
	TotalEpisodes     string
	CurrentEpisode    string
	CreatedAt         string
	UpdatedAt         string
}{
	ID:                "id",
	Type:              "type",
	Title:             "title",
	OriginalTitle:     "original_title",
	PosterLink:        "poster_link",
	Description:       "description",
	ReleaseYear:       "release_year",
	Score:             "score",
	DurationInMinutes: "duration_in_minutes",
	Quantity:          "quantity",
	TotalEpisodes:     "total_episodes",
	CurrentEpisode:    "current_episode",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
}

var ShowTableColumns = struct {
	ID                string
	Type              string
	Title             string
	OriginalTitle     string
	PosterLink        string
	Description       string
	ReleaseYear       string
	Score             string
	DurationInMinutes string
	Quantity          string
	TotalEpisodes     string
	CurrentEpisode    string
	CreatedAt         string
	UpdatedAt         string
}{
	ID:                "shows.id",
	Type:              "shows.type",
	Title:             "shows.title",
	OriginalTitle:     "shows.original_title",
	PosterLink:        "shows.poster_link",
	Description:       "shows.description",
	ReleaseYear:       "shows.release_year",
	Score:             "shows.score",
	DurationInMinutes: "shows.duration_in_minutes",
	Quantity:          "shows.quantity",
	TotalEpisodes:     "shows.total_episodes",
	CurrentEpisode:    "shows.current_episode",
	CreatedAt:         "shows.created_at",
	UpdatedAt:         "shows.updated_at",
}

// Generated where

type whereHelperShowType struct{ field string }

func (w whereHelperShowType) EQ(x ShowType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperShowType) NEQ(x ShowType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperShowType) LT(x ShowType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperShowType) LTE(x ShowType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperShowType) GT(x ShowType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperShowType) GTE(x ShowType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperShowType) IN(slice []ShowType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperShowType) NIN(slice []ShowType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperfloat32 struct{ field string }

func (w whereHelperfloat32) EQ(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat32) NEQ(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat32) LT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat32) LTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat32) GT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat32) GTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat32) IN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat32) NIN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var ShowWhere = struct {
	ID                whereHelperint64
	Type              whereHelperShowType
	Title             whereHelperstring
	OriginalTitle     whereHelperstring
	PosterLink        whereHelperstring
	Description       whereHelperstring
	ReleaseYear       whereHelperint
	Score             whereHelperfloat32
	DurationInMinutes whereHelperint
	Quantity          whereHelperstring
	TotalEpisodes     whereHelperint
	CurrentEpisode    whereHelperint
	CreatedAt         whereHelpertime_Time
	UpdatedAt         whereHelpertime_Time
}{
	ID:                whereHelperint64{field: "\"shows\".\"id\""},
	Type:              whereHelperShowType{field: "\"shows\".\"type\""},
	Title:             whereHelperstring{field: "\"shows\".\"title\""},
	OriginalTitle:     whereHelperstring{field: "\"shows\".\"original_title\""},
	PosterLink:        whereHelperstring{field: "\"shows\".\"poster_link\""},
	Description:       whereHelperstring{field: "\"shows\".\"description\""},
	ReleaseYear:       whereHelperint{field: "\"shows\".\"release_year\""},
	Score:             whereHelperfloat32{field: "\"shows\".\"score\""},
	DurationInMinutes: whereHelperint{field: "\"shows\".\"duration_in_minutes\""},
	Quantity:          whereHelperstring{field: "\"shows\".\"quantity\""},
	TotalEpisodes:     whereHelperint{field: "\"shows\".\"total_episodes\""},
	CurrentEpisode:    whereHelperint{field: "\"shows\".\"current_episode\""},
	CreatedAt:         whereHelpertime_Time{field: "\"shows\".\"created_at\""},
	UpdatedAt:         whereHelpertime_Time{field: "\"shows\".\"updated_at\""},
}

// ShowRels is where relationship names are stored.
var ShowRels = struct {
	Subtitles    string
	TorrentLinks string
}{
	Subtitles:    "Subtitles",
	TorrentLinks: "TorrentLinks",
}

// showR is where relationships are stored.
type showR struct {
	Subtitles    SubtitleSlice    `boil:"Subtitles" json:"Subtitles" toml:"Subtitles" yaml:"Subtitles"`
	TorrentLinks TorrentLinkSlice `boil:"TorrentLinks" json:"TorrentLinks" toml:"TorrentLinks" yaml:"TorrentLinks"`
}

// NewStruct creates a new relationship struct
func (*showR) NewStruct() *showR {
	return &showR{}
}

func (r *showR) GetSubtitles() SubtitleSlice {
	if r == nil {
		return nil
	}
	return r.Subtitles
}

func (r *showR) GetTorrentLinks() TorrentLinkSlice {
	if r == nil {
		return nil
	}
	return r.TorrentLinks
}

// showL is where Load methods for each relationship are stored.
type showL struct{}

var (
	showAllColumns            = []string{"id", "type", "title", "original_title", "poster_link", "description", "release_year", "score", "duration_in_minutes", "quantity", "total_episodes", "current_episode", "created_at", "updated_at"}
	showColumnsWithoutDefault = []string{"type", "title", "original_title", "poster_link", "description", "release_year"}
	showColumnsWithDefault    = []string{"id", "score", "duration_in_minutes", "quantity", "total_episodes", "current_episode", "created_at", "updated_at"}
	showPrimaryKeyColumns     = []string{"id"}
	showGeneratedColumns      = []string{}
)

type (
	// ShowSlice is an alias for a slice of pointers to Show.
	// This should almost always be used instead of []Show.
	ShowSlice []*Show
	// ShowHook is the signature for custom Show hook methods
	ShowHook func(context.Context, boil.ContextExecutor, *Show) error

	showQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	showType                 = reflect.TypeOf(&Show{})
	showMapping              = queries.MakeStructMapping(showType)
	showPrimaryKeyMapping, _ = queries.BindMapping(showType, showMapping, showPrimaryKeyColumns)
	showInsertCacheMut       sync.RWMutex
	showInsertCache          = make(map[string]insertCache)
	showUpdateCacheMut       sync.RWMutex
	showUpdateCache          = make(map[string]updateCache)
	showUpsertCacheMut       sync.RWMutex
	showUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var showAfterSelectMu sync.Mutex
var showAfterSelectHooks []ShowHook

var showBeforeInsertMu sync.Mutex
var showBeforeInsertHooks []ShowHook
var showAfterInsertMu sync.Mutex
var showAfterInsertHooks []ShowHook

var showBeforeUpdateMu sync.Mutex
var showBeforeUpdateHooks []ShowHook
var showAfterUpdateMu sync.Mutex
var showAfterUpdateHooks []ShowHook

var showBeforeDeleteMu sync.Mutex
var showBeforeDeleteHooks []ShowHook
var showAfterDeleteMu sync.Mutex
var showAfterDeleteHooks []ShowHook

var showBeforeUpsertMu sync.Mutex
var showBeforeUpsertHooks []ShowHook
var showAfterUpsertMu sync.Mutex
var showAfterUpsertHooks []ShowHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Show) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range showAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Show) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range showBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Show) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range showAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Show) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range showBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Show) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range showAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Show) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range showBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Show) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range showAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Show) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range showBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Show) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range showAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddShowHook registers your hook function for all future operations.
func AddShowHook(hookPoint boil.HookPoint, showHook ShowHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		showAfterSelectMu.Lock()
		showAfterSelectHooks = append(showAfterSelectHooks, showHook)
		showAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		showBeforeInsertMu.Lock()
		showBeforeInsertHooks = append(showBeforeInsertHooks, showHook)
		showBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		showAfterInsertMu.Lock()
		showAfterInsertHooks = append(showAfterInsertHooks, showHook)
		showAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		showBeforeUpdateMu.Lock()
		showBeforeUpdateHooks = append(showBeforeUpdateHooks, showHook)
		showBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		showAfterUpdateMu.Lock()
		showAfterUpdateHooks = append(showAfterUpdateHooks, showHook)
		showAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		showBeforeDeleteMu.Lock()
		showBeforeDeleteHooks = append(showBeforeDeleteHooks, showHook)
		showBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		showAfterDeleteMu.Lock()
		showAfterDeleteHooks = append(showAfterDeleteHooks, showHook)
		showAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		showBeforeUpsertMu.Lock()
		showBeforeUpsertHooks = append(showBeforeUpsertHooks, showHook)
		showBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		showAfterUpsertMu.Lock()
		showAfterUpsertHooks = append(showAfterUpsertHooks, showHook)
		showAfterUpsertMu.Unlock()
	}
}

// One returns a single show record from the query.
func (q showQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Show, error) {
	o := &Show{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for shows")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Show records from the query.
func (q showQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShowSlice, error) {
	var o []*Show

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to Show slice")
	}

	if len(showAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Show records in the query.
func (q showQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count shows rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q showQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if shows exists")
	}

	return count > 0, nil
}

// Subtitles retrieves all the subtitle's Subtitles with an executor.
func (o *Show) Subtitles(mods ...qm.QueryMod) subtitleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"subtitles\".\"show_id\"=?", o.ID),
	)

	return Subtitles(queryMods...)
}

// TorrentLinks retrieves all the torrent_link's TorrentLinks with an executor.
func (o *Show) TorrentLinks(mods ...qm.QueryMod) torrentLinkQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"torrent_links\".\"show_id\"=?", o.ID),
	)

	return TorrentLinks(queryMods...)
}

// LoadSubtitles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (showL) LoadSubtitles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShow interface{}, mods queries.Applicator) error {
	var slice []*Show
	var object *Show

	if singular {
		var ok bool
		object, ok = maybeShow.(*Show)
		if !ok {
			object = new(Show)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShow)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShow))
			}
		}
	} else {
		s, ok := maybeShow.(*[]*Show)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShow)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShow))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &showR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &showR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`subtitles`),
		qm.WhereIn(`subtitles.show_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load subtitles")
	}

	var resultSlice []*Subtitle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice subtitles")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on subtitles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subtitles")
	}

	if len(subtitleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Subtitles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &subtitleR{}
			}
			foreign.R.Show = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ShowID) {
				local.R.Subtitles = append(local.R.Subtitles, foreign)
				if foreign.R == nil {
					foreign.R = &subtitleR{}
				}
				foreign.R.Show = local
				break
			}
		}
	}

	return nil
}

// LoadTorrentLinks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (showL) LoadTorrentLinks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShow interface{}, mods queries.Applicator) error {
	var slice []*Show
	var object *Show

	if singular {
		var ok bool
		object, ok = maybeShow.(*Show)
		if !ok {
			object = new(Show)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShow)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShow))
			}
		}
	} else {
		s, ok := maybeShow.(*[]*Show)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShow)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShow))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &showR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &showR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`torrent_links`),
		qm.WhereIn(`torrent_links.show_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load torrent_links")
	}

	var resultSlice []*TorrentLink
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice torrent_links")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on torrent_links")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for torrent_links")
	}

	if len(torrentLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TorrentLinks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &torrentLinkR{}
			}
			foreign.R.Show = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ShowID) {
				local.R.TorrentLinks = append(local.R.TorrentLinks, foreign)
				if foreign.R == nil {
					foreign.R = &torrentLinkR{}
				}
				foreign.R.Show = local
				break
			}
		}
	}

	return nil
}

// AddSubtitles adds the given related objects to the existing relationships
// of the show, optionally inserting them as new records.
// Appends related to o.R.Subtitles.
// Sets related.R.Show appropriately.
func (o *Show) AddSubtitles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Subtitle) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ShowID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"subtitles\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"show_id"}),
				strmangle.WhereClause("\"", "\"", 2, subtitlePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ShowID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &showR{
			Subtitles: related,
		}
	} else {
		o.R.Subtitles = append(o.R.Subtitles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &subtitleR{
				Show: o,
			}
		} else {
			rel.R.Show = o
		}
	}
	return nil
}

// SetSubtitles removes all previously related items of the
// show replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Show's Subtitles accordingly.
// Replaces o.R.Subtitles with related.
// Sets related.R.Show's Subtitles accordingly.
func (o *Show) SetSubtitles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Subtitle) error {
	query := "update \"subtitles\" set \"show_id\" = null where \"show_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Subtitles {
			queries.SetScanner(&rel.ShowID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Show = nil
		}
		o.R.Subtitles = nil
	}

	return o.AddSubtitles(ctx, exec, insert, related...)
}

// RemoveSubtitles relationships from objects passed in.
// Removes related items from R.Subtitles (uses pointer comparison, removal does not keep order)
// Sets related.R.Show.
func (o *Show) RemoveSubtitles(ctx context.Context, exec boil.ContextExecutor, related ...*Subtitle) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ShowID, nil)
		if rel.R != nil {
			rel.R.Show = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("show_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Subtitles {
			if rel != ri {
				continue
			}

			ln := len(o.R.Subtitles)
			if ln > 1 && i < ln-1 {
				o.R.Subtitles[i] = o.R.Subtitles[ln-1]
			}
			o.R.Subtitles = o.R.Subtitles[:ln-1]
			break
		}
	}

	return nil
}

// AddTorrentLinks adds the given related objects to the existing relationships
// of the show, optionally inserting them as new records.
// Appends related to o.R.TorrentLinks.
// Sets related.R.Show appropriately.
func (o *Show) AddTorrentLinks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TorrentLink) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ShowID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"torrent_links\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"show_id"}),
				strmangle.WhereClause("\"", "\"", 2, torrentLinkPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ShowID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &showR{
			TorrentLinks: related,
		}
	} else {
		o.R.TorrentLinks = append(o.R.TorrentLinks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &torrentLinkR{
				Show: o,
			}
		} else {
			rel.R.Show = o
		}
	}
	return nil
}

// SetTorrentLinks removes all previously related items of the
// show replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Show's TorrentLinks accordingly.
// Replaces o.R.TorrentLinks with related.
// Sets related.R.Show's TorrentLinks accordingly.
func (o *Show) SetTorrentLinks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TorrentLink) error {
	query := "update \"torrent_links\" set \"show_id\" = null where \"show_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TorrentLinks {
			queries.SetScanner(&rel.ShowID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Show = nil
		}
		o.R.TorrentLinks = nil
	}

	return o.AddTorrentLinks(ctx, exec, insert, related...)
}

// RemoveTorrentLinks relationships from objects passed in.
// Removes related items from R.TorrentLinks (uses pointer comparison, removal does not keep order)
// Sets related.R.Show.
func (o *Show) RemoveTorrentLinks(ctx context.Context, exec boil.ContextExecutor, related ...*TorrentLink) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ShowID, nil)
		if rel.R != nil {
			rel.R.Show = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("show_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TorrentLinks {
			if rel != ri {
				continue
			}

			ln := len(o.R.TorrentLinks)
			if ln > 1 && i < ln-1 {
				o.R.TorrentLinks[i] = o.R.TorrentLinks[ln-1]
			}
			o.R.TorrentLinks = o.R.TorrentLinks[:ln-1]
			break
		}
	}

	return nil
}

// Shows retrieves all the records using an executor.
func Shows(mods ...qm.QueryMod) showQuery {
	mods = append(mods, qm.From("\"shows\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shows\".*"})
	}

	return showQuery{q}
}

// FindShow retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShow(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Show, error) {
	showObj := &Show{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shows\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, showObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from shows")
	}

	if err = showObj.doAfterSelectHooks(ctx, exec); err != nil {
		return showObj, err
	}

	return showObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Show) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no shows provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(showColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	showInsertCacheMut.RLock()
	cache, cached := showInsertCache[key]
	showInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			showAllColumns,
			showColumnsWithDefault,
			showColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(showType, showMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(showType, showMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shows\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shows\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into shows")
	}

	if !cached {
		showInsertCacheMut.Lock()
		showInsertCache[key] = cache
		showInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Show.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Show) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	showUpdateCacheMut.RLock()
	cache, cached := showUpdateCache[key]
	showUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			showAllColumns,
			showPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update shows, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shows\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, showPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(showType, showMapping, append(wl, showPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update shows row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for shows")
	}

	if !cached {
		showUpdateCacheMut.Lock()
		showUpdateCache[key] = cache
		showUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q showQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for shows")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for shows")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShowSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), showPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shows\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, showPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in show slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all show")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Show) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no shows provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(showColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	showUpsertCacheMut.RLock()
	cache, cached := showUpsertCache[key]
	showUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			showAllColumns,
			showColumnsWithDefault,
			showColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			showAllColumns,
			showPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert shows, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(showPrimaryKeyColumns))
			copy(conflict, showPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shows\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(showType, showMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(showType, showMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert shows")
	}

	if !cached {
		showUpsertCacheMut.Lock()
		showUpsertCache[key] = cache
		showUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Show record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Show) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no Show provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), showPrimaryKeyMapping)
	sql := "DELETE FROM \"shows\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from shows")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for shows")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q showQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no showQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from shows")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for shows")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShowSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(showBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), showPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shows\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, showPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from show slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for shows")
	}

	if len(showAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Show) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShow(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShowSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShowSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), showPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shows\".* FROM \"shows\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, showPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in ShowSlice")
	}

	*o = slice

	return nil
}

// ShowExists checks if the Show row exists.
func ShowExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shows\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if shows exists")
	}

	return exists, nil
}

// Exists checks if the Show row exists.
func (o *Show) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ShowExists(ctx, exec, o.ID)
}
