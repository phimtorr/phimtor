// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package http

import (
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Stream file
	// (GET /stream/{infoHash}/files/{fileIndex}/{fileName})
	StreamFile(w http.ResponseWriter, r *http.Request, infoHash InfoHash, fileIndex FileIndex, fileName FileName)
	// Stream video file
	// (GET /stream/{infoHash}/videos/{fileIndex}/{fileName})
	StreamVideoFile(w http.ResponseWriter, r *http.Request, infoHash InfoHash, fileIndex FileIndex, fileName FileName)
	// Drop all torrents
	// (DELETE /torrents)
	DropAllTorrents(w http.ResponseWriter, r *http.Request, params DropAllTorrentsParams)
	// List torrents
	// (GET /torrents)
	ListTorrents(w http.ResponseWriter, r *http.Request)
	// Add torrent
	// (POST /torrents)
	AddTorrent(w http.ResponseWriter, r *http.Request, params AddTorrentParams)
	// Get torrent stats
	// (GET /torrents/{infoHash}//{fileIndex}/stats)
	GetTorrentStats(w http.ResponseWriter, r *http.Request, infoHash InfoHash, fileIndex FileIndex)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Stream file
// (GET /stream/{infoHash}/files/{fileIndex}/{fileName})
func (_ Unimplemented) StreamFile(w http.ResponseWriter, r *http.Request, infoHash InfoHash, fileIndex FileIndex, fileName FileName) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Stream video file
// (GET /stream/{infoHash}/videos/{fileIndex}/{fileName})
func (_ Unimplemented) StreamVideoFile(w http.ResponseWriter, r *http.Request, infoHash InfoHash, fileIndex FileIndex, fileName FileName) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Drop all torrents
// (DELETE /torrents)
func (_ Unimplemented) DropAllTorrents(w http.ResponseWriter, r *http.Request, params DropAllTorrentsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List torrents
// (GET /torrents)
func (_ Unimplemented) ListTorrents(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add torrent
// (POST /torrents)
func (_ Unimplemented) AddTorrent(w http.ResponseWriter, r *http.Request, params AddTorrentParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get torrent stats
// (GET /torrents/{infoHash}//{fileIndex}/stats)
func (_ Unimplemented) GetTorrentStats(w http.ResponseWriter, r *http.Request, infoHash InfoHash, fileIndex FileIndex) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// StreamFile operation middleware
func (siw *ServerInterfaceWrapper) StreamFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "infoHash" -------------
	var infoHash InfoHash

	err = runtime.BindStyledParameterWithLocation("simple", false, "infoHash", runtime.ParamLocationPath, chi.URLParam(r, "infoHash"), &infoHash)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "infoHash", Err: err})
		return
	}

	// ------------- Path parameter "fileIndex" -------------
	var fileIndex FileIndex

	err = runtime.BindStyledParameterWithLocation("simple", false, "fileIndex", runtime.ParamLocationPath, chi.URLParam(r, "fileIndex"), &fileIndex)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileIndex", Err: err})
		return
	}

	// ------------- Path parameter "fileName" -------------
	var fileName FileName

	err = runtime.BindStyledParameterWithLocation("simple", false, "fileName", runtime.ParamLocationPath, chi.URLParam(r, "fileName"), &fileName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StreamFile(w, r, infoHash, fileIndex, fileName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// StreamVideoFile operation middleware
func (siw *ServerInterfaceWrapper) StreamVideoFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "infoHash" -------------
	var infoHash InfoHash

	err = runtime.BindStyledParameterWithLocation("simple", false, "infoHash", runtime.ParamLocationPath, chi.URLParam(r, "infoHash"), &infoHash)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "infoHash", Err: err})
		return
	}

	// ------------- Path parameter "fileIndex" -------------
	var fileIndex FileIndex

	err = runtime.BindStyledParameterWithLocation("simple", false, "fileIndex", runtime.ParamLocationPath, chi.URLParam(r, "fileIndex"), &fileIndex)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileIndex", Err: err})
		return
	}

	// ------------- Path parameter "fileName" -------------
	var fileName FileName

	err = runtime.BindStyledParameterWithLocation("simple", false, "fileName", runtime.ParamLocationPath, chi.URLParam(r, "fileName"), &fileName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StreamVideoFile(w, r, infoHash, fileIndex, fileName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DropAllTorrents operation middleware
func (siw *ServerInterfaceWrapper) DropAllTorrents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DropAllTorrentsParams

	// ------------- Optional query parameter "delete" -------------

	err = runtime.BindQueryParameter("form", true, false, "delete", r.URL.Query(), &params.Delete)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "delete", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DropAllTorrents(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListTorrents operation middleware
func (siw *ServerInterfaceWrapper) ListTorrents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTorrents(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddTorrent operation middleware
func (siw *ServerInterfaceWrapper) AddTorrent(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AddTorrentParams

	// ------------- Optional query parameter "dropOthers" -------------

	err = runtime.BindQueryParameter("form", true, false, "dropOthers", r.URL.Query(), &params.DropOthers)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dropOthers", Err: err})
		return
	}

	// ------------- Optional query parameter "deleteOthers" -------------

	err = runtime.BindQueryParameter("form", true, false, "deleteOthers", r.URL.Query(), &params.DeleteOthers)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "deleteOthers", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddTorrent(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTorrentStats operation middleware
func (siw *ServerInterfaceWrapper) GetTorrentStats(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "infoHash" -------------
	var infoHash InfoHash

	err = runtime.BindStyledParameterWithLocation("simple", false, "infoHash", runtime.ParamLocationPath, chi.URLParam(r, "infoHash"), &infoHash)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "infoHash", Err: err})
		return
	}

	// ------------- Path parameter "fileIndex" -------------
	var fileIndex FileIndex

	err = runtime.BindStyledParameterWithLocation("simple", false, "fileIndex", runtime.ParamLocationPath, chi.URLParam(r, "fileIndex"), &fileIndex)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileIndex", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTorrentStats(w, r, infoHash, fileIndex)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/stream/{infoHash}/files/{fileIndex}/{fileName}", wrapper.StreamFile)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/stream/{infoHash}/videos/{fileIndex}/{fileName}", wrapper.StreamVideoFile)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/torrents", wrapper.DropAllTorrents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/torrents", wrapper.ListTorrents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/torrents", wrapper.AddTorrent)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/torrents/{infoHash}//{fileIndex}/stats", wrapper.GetTorrentStats)
	})

	return r
}
