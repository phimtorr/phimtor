// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/include/libtorrent.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class TorrentBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  TorrentBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  TorrentBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int Start(
    GoString dataDir,
    int debug,
  ) {
    return _Start(
      dataDir,
      debug,
    );
  }

  late final _StartPtr =
      _lookup<ffi.NativeFunction<GoInt Function(GoString, GoUint8)>>('Start');
  late final _Start = _StartPtr.asFunction<int Function(GoString, int)>();

  void Stop() {
    return _Stop();
  }

  late final _StopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Stop');
  late final _Stop = _StopPtr.asFunction<void Function()>();
}

final class _GoString_ extends ffi.Struct {
  external ffi.Pointer<ffi.Char> p;

  @ptrdiff_t()
  external int n;
}

typedef ptrdiff_t = ffi.Long;
typedef Dartptrdiff_t = int;

final class GoInterface extends ffi.Struct {
  external ffi.Pointer<ffi.Void> t;

  external ffi.Pointer<ffi.Void> v;
}

final class GoSlice extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @GoInt()
  external int len;

  @GoInt()
  external int cap;
}

typedef GoInt = GoInt64;
typedef GoInt64 = ffi.LongLong;
typedef DartGoInt64 = int;
typedef GoString = _GoString_;
typedef GoUint8 = ffi.UnsignedChar;
typedef DartGoUint8 = int;
