package ui

import "github.com/phimtorr/phimtor/desktop/setting"
import "github.com/phimtorr/phimtor/desktop/i18n"
import "github.com/phimtorr/phimtor/desktop/server/uri"
import "github.com/phimtorr/phimtor/desktop/build"

templ Settings(settings setting.Settings) {
	@layout(i18n.MustT(ctx, "Settings.Title")) {
		<div class="pb-8 pt-4">
			<h1 class="text-2xl font-bold">{ i18n.T(ctx, "Settings.Title") }</h1>
			<small class="text-sm italic">Version: { build.Version }</small>
		</div>
		<div class="rounded-sm p-4 bg-stone-700">
			<div class="mt-4 border-b border-gray-400">
				<div class="my-4 grid grid-cols-2">
					<div>
						<h2 class="text-lg font-semibold leading-4">{ i18n.T(ctx, "Settings.Language.Title") }</h2>
						<p class="text-sm">
							{ i18n.T(ctx, "Settings.Language.Description") }
						</p>
					</div>
					<div class="flex justify-end">
						<div class="flex items-center">
							<select
								name="locale"
								id="locale"
								class="rounded border border-gray-400 bg-stone-700 p-2 text-slate-100 hover:border-red-700 hover:bg-stone-800 focus:border-red-700 focus:bg-stone-800 focus:outline-none"
								value={ settings.GetLocale() }
								hx-post={ uri.UpdateSettings() }
								hx-swap="outerHTML"
								hx-target="body"
							>
								<option value="vi" selected?={ settings.GetLocale() == "vi" }>Tiáº¿ng Viá»‡t <span>ðŸ‡»ðŸ‡³</span></option>
								<option value="en" selected?={ settings.GetLocale() == "en" }>English <span>ðŸ‡¬ðŸ‡§</span></option>
							</select>
						</div>
					</div>
				</div>
			</div>
			<div class="mt-4 border-b border-gray-400">
				<div class="my-4 grid grid-cols-2">
					<div>
						<h2 class="text-lg font-semibold leading-4">{ i18n.T(ctx, "Settings.DataDir.Title") }</h2>
						<p class="text-sm">
							{ i18n.T(ctx, "Settings.DataDir.Description") }
						</p>
						<p class="italic">{ settings.GetCurrentDataDir() }</p>
						if (settings.IsDataDirChanged()) {
							<p class="">
								{ i18n.T(ctx, "Settings.DataDir.NewDataDirNotification") }
								<span class="italic">{ settings.GetLatestDataDir() }</span>
							</p>
						}
					</div>
					<div class="flex justify-end">
						<div class="flex items-center">
							<button
								class="rounded-sm bg-red-600 px-4 py-2 text-slate-100 shadow-md shadow-stone-900 hover:bg-red-700"
								hx-post={ uri.ChangeDataDir() }
								hx-swap="outerHTML"
								hx-target="body"
							>
								{ i18n.T(ctx, "Settings.DataDir.Change") }
							</button>
						</div>
					</div>
				</div>
			</div>
			<div class="mt-4 border-gray-400">
				<div class="my-4 grid grid-cols-2">
					<div>
						<h2 class="text-lg font-semibold leading-4">
							{ i18n.T(ctx, "Settings.DeleteAfterClosed.Title") }
						</h2>
						<p class="text-sm">
							{ i18n.T(ctx, "Settings.DeleteAfterClosed.Description") }
						</p>
					</div>
					<div class="flex justify-end">
						<div class="flex items-center">
							<label class="relative inline-flex cursor-pointer items-center">
								<input
									name="deleteAfterClosed"
									id="deleteAfterClosed"
									type="checkbox"
									class="peer sr-only"
									checked?={ settings.GetDeleteAfterClosed() }
									hx-post={ uri.UpdateSettings() }
									hx-swap="outerHTML"
									hx-target="body"
									hx-include="[name=deleteAfterClosed]"
								/>
								<div
									class="peer h-7 w-14 rounded-full border-gray-600 bg-stone-600 after:absolute after:start-[4px] after:top-0.5 after:h-6 after:w-6 after:rounded-full after:border after:border-gray-300 after:bg-white after:transition-all after:content-[''] peer-checked:bg-red-700 peer-checked:after:translate-x-full peer-checked:after:border-white peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-gray-500 rtl:peer-checked:after:-translate-x-full"
								></div>
								<input type="hidden" name="deleteAfterClosed" value="false"/>
							</label>
						</div>
					</div>
				</div>
			</div>
		</div>
	}
}
