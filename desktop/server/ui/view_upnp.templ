package ui

import "github.com/phimtorr/phimtor/desktop/client/api"
import "github.com/phimtorr/phimtor/desktop/server/uri"
import "github.com/phimtorr/phimtor/desktop/i18n"
import "github.com/huin/goupnp/dcps/av1"
import "github.com/phimtorr/phimtor/desktop/torrent"

templ UPnP(video api.Video) {
	@layout("UPnP | " + video.Title) {
		<div class="my-2 flex items-center justify-end">
			@backButton()
		</div>
		<section class="flex flex-col h-full">
			<section class="w-full space-y-2">
				<div class="flex items-center justify-between space-x-2">
					<h1 class="my-2 text-2xl font-bold">{ video.Title }</h1>
				</div>
			</section>
			<section
				hx-get={ uri.UPnPListTorrents(video.Id) }
				hx-trigger="load"
				hx-swap="outerHTML"
				hx-target-error="find .errors"
			>
				@errorPlaceHolder()
				<p class="text-sm italic">Loading Torrents</p>
			</section>
			<section
				hx-get={ uri.UPnPListSubtitles(video.Id) }
				hx-trigger="load"
				hx-swap="outerHTML"
				hx-target-error="find .errors"
			>
				@errorPlaceHolder()
				<p class="text-sm italic">Loading Subtitles</p>
			</section>
			<section
				hx-get={ uri.UPnPDevices() }
				hx-trigger="load"
				hx-swap="outerHTML"
				hx-target-error="find .errors"
			>
				@errorPlaceHolder()
				<p class="text-sm italic">Loading Devices</p>
			</section>
			@UPnPController(torrent.InfoHash{}, 0)
		</section>
	}
}

templ UPnPTorrents(videoID int64, torrents []api.TorrentLink, selectedTorrent api.TorrentLink) {
	<section class="w-full mt-4" id="torrents"
		hx-indicator=".torrent-indicator"
		hx-target-error="#torrent-errors"
	>
		<div class="flex items-center justify-between">
			<h3 class="my-4 text-xl font-bold">
				<span class="border-b-2 border-red-700 pb-1">Torrents</span>
			</h3>
			<div class="inline-flex items-center space-x-2">
				@htmxIndicatorWithClassName("torrent-indicator")
			</div>
		</div>
		@errorPlaceHolderWithID("torrent-errors")
		<div class="flex flex-wrap gap-2 mt-4">
			
			for _, l := range torrents {
				if l.Id == selectedTorrent.Id {
					@primaryButton(l.Name, templ.Attributes{
						"disabled": "true",
					})
				} else {
					@secondaryButton(templ.Attributes{
						"hx-post":      uri.UPnPSetTorrent(videoID, l.Id),
						"hx-swap":      "outerHTML",
						"hx-target":    "closest section",
					}, span(l.Name))
				}
			}
		</div>
	</section>
}

templ UPnPSubtitles(videoID int64, subtitles []api.Subtitle, selectedID int64, seletedName string) {
	<section id="subtitles"
		hx-indicator=".subtitle-indicator"
		hx-target-error="#subtitle-errors"
	>
		<div class="flex items-center justify-between">
			<h3 class="my-4 text-xl font-bold">
				<span class="border-b-2 border-red-700 pb-1">{ i18n.T(ctx, "Subtitle.Title") }</span>
			</h3>
			<div class="inline-flex items-center space-x-2">
				<p class="pr-1 text-sm">{ seletedName }</p>
				@htmxIndicatorWithClassName("subtitle-indicator")
			</div>
		</div>
		@errorPlaceHolderWithID("subtitle-errors")
		<div
			class="col-span-1 flex flex-col rounded-sm px-1 py-3 hover:bg-stone-800"
		>
			<h4 class="mb-1 text-sm font-thin">{ i18n.T(ctx, "Subtitle.AddFromFile") }</h4>
			<input
				type="file"
				name="fileInput"
				accept=".vtt, .srt, application/x-subrip, text/vtt, .ass"
				class="rounded border border-gray-400 bg-stone-700 text-stone-100 file:mr-5 file:rounded-l file:border-[0px] file:bg-stone-700 file:p-4 file:text-stone-100 hover:border-red-700 hover:file:cursor-pointer hover:file:bg-stone-800 hover:file:text-red-700"
				hx-encoding="multipart/form-data"
				hx-post={ uri.UPnPUploadSubtitle(videoID) }
				hx-swap="outerHTML"
				hx-target="closest section"
				
			/>
		</div>
		<div class="flex flex-wrap space-x-2 space-y-2">
			for _, sub := range subtitles {
				if sub.Id == selectedID {
					@primaryButton(upnpSubName(sub), templ.Attributes{
						"disabled": "true",
					})
				} else {
					@secondaryButton(templ.Attributes{
						"hx-post":      uri.UPnPSetSubtitle(videoID, sub.Id),
						"hx-swap":      "outerHTML",
						"hx-target":    "closest section",
					}, span(upnpSubName(sub)))
				}
			}
		</div>
	</section>
}

func upnpSubName(sub api.Subtitle) string {
	prefix := ""
	if sub.Language == "vi" {
		prefix = "[Viet] "

	}
	if sub.Language == "en" {
		prefix = "[Eng] "
	}
	return prefix + sub.Name
}


templ UPnPDevices(devices []*av1.AVTransport1, selectedUDN string) {
	<section id="devices"
		hx-indicator=".device-indicator"
		hx-target-error="#device-errors"
	>
		<div class="flex items-center justify-between">
			<h3 class="my-4 text-xl font-bold">
				<span class="border-b-2 border-red-700 pb-1">Devices</span>
			</h3>
			<div class="inline-flex items-center space-x-2">
				@secondaryButton(templ.Attributes{
					"hx-post":      uri.UPnPScanDevices(),
					"hx-swap":      "outerHTML",
					"hx-target":    "closest section",
				}, span("Scan"))
				@htmxIndicatorWithClassName("device-indicator")
			</div>
		</div>
		@errorPlaceHolderWithID("device-errors")
		<div class="flex flex-wrap space-x-2 space-y-2">
			if len(devices) == 0 {
				<p>No devices available</p>
			}
			for _, d := range devices {
				if d.RootDevice.Device.UDN == selectedUDN {
					@primaryButton(d.RootDevice.Device.FriendlyName, templ.Attributes{
						"disabled": "true",
					})
				} else {
					@secondaryButton(templ.Attributes{
						"hx-post":      uri.UPnPSelectDevice(d.RootDevice.Device.UDN),
						"hx-swap":      "outerHTML",
						"hx-target":    "closest section",
					}, span(d.RootDevice.Device.FriendlyName))
				}
			}
		</div>
	</section>
}

templ UPnPController(infoHash torrent.InfoHash, fileIndex int) {
	<section id="controller"
		hx-indicator=".controller-indicator"
		hx-target-error="#controller-errors"
		class="mt-4"
	>
		<div class="flex space-x-2 items-center justify-center">
			@secondaryButton(templ.Attributes{
				"hx-post":      uri.UPnPPlay(),
				"hx-swap":      "outerHTML",
				"hx-target":    "closest section",
			}, span("Play"))
		</div>
		@errorPlaceHolderWithID("controller-errors")
		if !infoHash.IsZero() {
			<section
				hx-get={ uri.GetStats(infoHash, fileIndex) }
				hx-trigger="every 2s"
				hx-sync="this:abort"
			></section>
		}
	</section>
}