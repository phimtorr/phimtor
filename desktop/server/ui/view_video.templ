package ui

import "github.com/phimtorr/phimtor/desktop/client/api"
import "github.com/phimtorr/phimtor/desktop/torrent"
import "github.com/phimtorr/phimtor/desktop/server/uri"
import "github.com/phimtorr/phimtor/desktop/i18n"

templ Video(video api.Video, infoHash torrent.InfoHash, selectedLink api.TorrentLink, selectedSubtitleName string) {
	@layout(video.Title) {
		<section class="w-full">
			<video
				class="w-full"
				controls
				autoplay
				disablepictureinpicture
				preload="auto"
				crossorigin="anonymous"
			>
				<source
					src={ uri.GetStream(infoHash, selectedLink.FileIndex) }
					type="video/mp4"
				/>
				<div id="subtitleTrack"></div>
				Your browser does not support the video tag.
			</video>
			<h1 class="my-2 text-2xl font-bold">{ video.Title }</h1>
		</section>
		<section class="w-full mt-4">
			<h2 class="text-xl font-semibold">Torrents</h2>
			<div class="flex flex-wrap gap-2 mt-4">
				for _, l := range video.TorrentLinks {
					if l == selectedLink {
						<button
							type="button"
							class="inline-flex justify-center items-center space-x-1 rounded bg-red-600 px-4 py-2 text-slate-100 hover:bg-red-700"
							disabled
						>{ l.Name }</button>
					} else {
						@secondaryButtonLink(uri.GetVideoWithTorrentName(video.Id, l.Name), span(l.Name))
					}
				}
			</div>
		</section>
		<section
			hx-trigger="load"
			hx-post={ uri.SelectSubtitle(video.Id, selectedSubtitleName) }
			hx-swap="outerHTML"
		></section>
	}
}

func filterSubtitles(subtitles []api.Subtitle, lang string) []api.Subtitle {
	var filtered []api.Subtitle
	for _, s := range subtitles {
		if s.Language == lang {
			filtered = append(filtered, s)
		}
	}
	return filtered
}

type SubtitleState struct {
	Name                   string
	FileName               string
	OriginalContent        []byte
	Content                []byte
	AdjustmentMilliseconds int
}

templ SubtitleSectionWithoutSubtitle(videoID int64, availableSubtitles []api.Subtitle) {
	@SubtitleSection(videoID, availableSubtitles, SubtitleState{})
}

templ SubtitleSection(videoID int64, availableSubtitles []api.Subtitle, state SubtitleState) {
	if len(state.Content) == 0 {
		<div id="subtitleTrack" hx-swap-oob="outerHTML:#subtitleTrack"></div>
	} else {
		<track
			id="subtitleTrack"
			hx-swap-oob="outerHTML:#subtitleTrack"
			kind="subtitles"
			label={ state.Name }
			srclang="en"
			src={ toBase64Src("text/vtt", state.Content) }
			default
		/>
	}
	<section id="subtitleSection" class="mt-4">
		<div class="flex items-center justify-between">
			<h3 class="my-4 text-xl font-bold">
				<span class="border-b-2 border-red-700 pb-1">{ i18n.T(ctx, "Subtitle.Title") }</span>
			</h3>
			<div class="inline-flex items-center space-x-2">
				<p class="pr-1 text-sm">{ state.Name }</p>
				@htmxIndicatorWithClassName("subtitle-indicator")
			</div>
		</div>
		<div class="grid grid-cols-1 gap-1 text-sm md:grid-cols-2">
			<div
				class="col-span-1 flex flex-col rounded-sm px-1 py-3 hover:bg-stone-700"
			>
				<h4 class="mb-1 text-sm font-thin">{ i18n.T(ctx, "Subtitle.Adjustment.Title") }</h4>
				<div
					class="flex items-center"
					hx-include="[name='name'], [name='fileName'], [name='originalContent']"
				>
					<input type="hidden" name="name" value={ state.Name }/>
					<input type="hidden" name="fileName" value={ state.FileName }/>
					<input type="hidden" name="originalContent" value={ toBase64(state.OriginalContent) }/>
					<button
						class="m-1 rounded bg-stone-900 px-4 py-2 hover:bg-red-700"
						hx-post={ uri.AdjustSubtitle(videoID, 0) }
						hx-target="#subtitleSection"
						hx-swap="outerHTML"
						hx-indicator=".subtitle-indicator"
					>
						<i icon="fa-solid fa-eraser"></i> { i18n.T(ctx, "Subtitle.Adjustment.Reset") }
					</button>
					<button
						class="m-1 rounded bg-stone-900 px-4 py-2 hover:bg-red-700"
						hx-post={ uri.AdjustSubtitle(videoID, state.AdjustmentMilliseconds-500) }
						hx-target="#subtitleSection"
						hx-swap="outerHTML"
						hx-indicator=".subtitle-indicator"
					>
						<i icon="fa-solid fa-backward"></i> -0.5s
					</button>
					<p class="mx-2">{ toString(state.AdjustmentMilliseconds) }ms</p>
					<button
						class="ml-2 rounded bg-stone-900 px-4 py-2 hover:bg-red-700"
						hx-post={ uri.AdjustSubtitle(videoID, state.AdjustmentMilliseconds+500) }
						hx-target="#subtitleSection"
						hx-swap="outerHTML"
						hx-indicator=".subtitle-indicator"
					>
						<i icon="fa-solid fa-forward"></i> +0.5s
					</button>
				</div>
			</div>
			<div
				class="col-span-1 flex flex-col rounded-sm px-1 py-3 hover:bg-stone-700"
			>
				<h4 class="mb-1 text-sm font-thin">{ i18n.T(ctx, "Subtitle.AddFromFile") }</h4>
				<input
					type="file"
					name="fileInput"
					accept=".vtt, .srt, application/x-subrip, text/vtt"
					class="rounded border border-gray-400 bg-stone-700 text-stone-100 file:mr-5 file:rounded-l file:border-[0px] file:bg-stone-700 file:p-4 file:text-stone-100 hover:border-red-700 hover:file:cursor-pointer hover:file:bg-stone-800 hover:file:text-red-700"
					hx-encoding="multipart/form-data"
					hx-post={ uri.UploadSubtitle(videoID) }
					hx-swap="outerHTML"
					hx-target="#subtitleSection"
					hx-indicator=".subtitle-indicator"
				/>
			</div>
		</div>
		<div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-3">
			<div class="">
				<h3 class="mb-2 text-lg font-bold">{ i18n.T(ctx, "Subtitle.Vietnamese") }</h3>
				<div class="w-full">
					for _, sub := range filterSubtitles(availableSubtitles, "vi") {
						@subtitle(videoID, sub, sub.Name == state.Name)
					}
				</div>
			</div>
			<div class="">
				<h3 class="mb-2 text-lg font-bold">{ i18n.T(ctx, "Subtitle.English") }</h3>
				<div class="w-full">
					for _, sub := range filterSubtitles(availableSubtitles, "en") {
						@subtitle(videoID, sub, sub.Name == state.Name)
					}
				</div>
			</div>
		</div>
	</section>
}

templ subtitle(videoID int64, sub api.Subtitle, isSelected bool) {
	<div class="flex items-center justify-between">
		<div class="flex-1">
			<div
				if isSelected {
					class="text-red-700"
				}
			>
				<p class="">
					{ sub.Name }
					if isSelected {
						<i class="fa-solid fa-check text-slate-100"></i>
					}
				</p>
				<p class="font-thin text-xs">{ sub.Owner }</p>
			</div>
		</div>
		<div class="flex space-x-2">
			if isSelected {
				@unselecteSubtitleButton(videoID)
			} else {
				@subtitleSelectButton(videoID, sub)
			}
			@subtitleDownloadButton(videoID, sub)
		</div>
	</div>
}

templ subtitleSelectButton(videoID int64, sub api.Subtitle) {
	<button
		class="rounded bg-red-600 px-4 py-2 font-bold text-white hover:bg-red-700 text-sm"
		hx-post={ uri.SelectSubtitle(videoID, sub.Name) }
		hx-swap="outerHTML"
		hx-target="#subtitleSection"
		hx-indicator=".subtitle-indicator"
	>
		{ i18n.T(ctx, "Subtitle.Action.Select") }
	</button>
}

templ unselecteSubtitleButton(videoID int64) {
	<button
		class="rounded bg-stone-600 px-4 py-2 font-bold text-white hover:bg-stone-700 text-sm"
		hx-post={ uri.UnselectSubtitle(videoID) }
		hx-swap="outerHTML"
		hx-target="#subtitleSection"
		hx-indicator=".subtitle-indicator"
	>
		{ i18n.T(ctx, "Subtitle.Action.Unselect") }
	</button>
}

templ subtitleDownloadButton(videoID int64, sub api.Subtitle) {
	<button
		class="rounded bg-stone-600 px-4 py-2 font-bold text-white hover:bg-stone-700 text-sm"
		hx-post={ uri.DownloadSubtitle(videoID, sub.Name) }
		hx-swap="none"
	>
		{ i18n.T(ctx, "Subtitle.Action.Download") }
	</button>
}
