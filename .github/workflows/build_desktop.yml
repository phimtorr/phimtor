name: Build Desktop App

permissions:
  contents: write

on:
  push:
    branches:
      - master

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    env:
      SERVER_ADDR: "https://dev.phimtor.net"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 50
          fetch-tags: true

      # Store the version, stripping any v-prefix
      - name: Write release version
        run: |
          VERSION=$(git describe --tags --always --match='v[0-9]*.[0-9]*.[0-9]*' 2> /dev/null | sed 's/^.//')
          if [ -z "$VERSION" ] || ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-.+)*$ ]]; then
            VERSION="0.0.0-$(git rev-parse --short HEAD)"
          fi
          echo Version: $VERSION
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash

      # Setup Golang
      - name: Setup Golang
        uses: actions/setup-go@v5
        with:
          go-version: 1.21
          check-latest: true
          cache-dependency-path: desktop/go.mod
      - run: go version
        shell: bash

      # ---- MacOS-------
      - name: Install dependencies
        if: runner.os == 'macOS'
        run: |
          brew install create-dmg
        shell: bash
      # Build MacOS
      - name: Build MacOS
        if: runner.os == 'macOS'
        run: |
          ./desktop/build/build-macos.sh
        shell: bash
      # ---- End MacOS --------

      # ------ Windows --------
      # Build Windows
      - name: Install dependencies
        if: runner.os == 'Windows'
        run: |
          choco install rcedit -y
        shell: bash
      - name: Build Windows
        if: runner.os == 'Windows'
        run: |
          ./desktop/build/build-windows.sh
        shell: bash
      # ------ End Windows -------

      # ----- Linux --------
      # Build Linux
      - name: Build Linux
        if: runner.os == 'Linux'
        run: |
          ./desktop/build/build-linux.sh
        shell: bash
      # ----- End Linux -------

      # Upload build assets
      - uses: actions/upload-artifact@v4
        with:
          name: desktop_app_${{runner.os}}
          path: |
            ${{github.workspace}}/desktop/bin/*.pkg
            ${{github.workspace}}/desktop/bin/*.dmg
            ${{github.workspace}}/desktop/bin/*.deb
            ${{github.workspace}}\desktop\bin\*.exe

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            **/bin/*.pkg
            **/bin/*.dmg
            **/bin/*.deb
            **/bin/*.exe
  release:
    needs: build
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Install ssh key
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
          cat >>~/.ssh/config <<END
          Host server
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking no
          END
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        shell: bash

      - name: Download desktop
        uses: actions/download-artifact@v4
        with:
          pattern: desktop_app_*
          merge-multiple: true
          path: desktop_app

      - run: |
          ls -lR desktop_app

      - name: Deploy desktop
        run: |
          ssh server 'mkdir -p ${{ vars.WORKING_DIR }}/desktop_app'
          ssh server 'rm -rf ${{ vars.WORKING_DIR }}/desktop_app/*'
          find desktop_app -name "*.exe" -o -name "*.pkg" -o -name "*.deb" -o -name "*.dmg" | xargs -I{} scp {} server:${{ vars.WORKING_DIR }}/desktop_app/
        shell: bash
