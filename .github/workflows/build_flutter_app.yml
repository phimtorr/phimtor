name: Build flutter app

permissions:
  contents: write

on:
  push:
    branches:
      - master

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    env:
      SERVER_ADDR: "https://phimtor.net"
    defaults:
      run:
        working-directory: phimtor_app
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 50

      # Store the version, stripping any v-prefix
      - name: Write release version
        run: |
          VERSION=$(git describe --tags --always --match='v[0-9]*.[0-9]*.[0-9]*' 2> /dev/null | sed 's/^.//')
          if [ -z "$VERSION" ] || ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-.+)*$ ]]; then
            VERSION="0.0.1-$(git rev-parse --short HEAD)"
          fi
          echo Version: $VERSION
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          cache: true

      - name: Setup Golang
        uses: actions/setup-go@v5
        with:
          go-version: 1.22
          check-latest: true
          cache-dependency-path: torrent/src/go.mod

      - name: Show go env
        run: go env
        shell: bash

      - name: Patch Linux
        if: runner.os == 'Linux'
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libglu1-mesa clang cmake ninja-build libgtk-3-dev libmpv-dev mpv libfuse2
          version: 1.0

      - name: Flutter doctor
        run: flutter doctor
        shell: bash

      ############################
      # Build for each platform
      ############################
      # Ubuntu
      - name: Build Linux
        if: runner.os == 'Linux'
        run: scripts/build-linux.sh ${{ env.VERSION }} ${{ github.run_attempt }}
        shell: bash

      # Windows
      - name: Build Windows
        if: runner.os == 'Windows'
        run: scripts/build-windows.sh ${{ env.VERSION }} ${{ github.run_attempt }}
        shell: bash

      - name: Compile .ISS to .EXE Installer
        if: runner.os == 'Windows'
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
        with:
          path: phimtor_app/windows/phimtor.iss
          options: /DMyAppVersion=${{ env.VERSION }} /DWorkingDir="${{ github.workspace }}\phimtor_app"

      # MacOS
      - name: Build MacOS
        if: runner.os == 'macOS'
        run: scripts/build-macos.sh ${{ env.VERSION }} ${{ github.run_attempt }}
        shell: bash

      - name: Archive Release
        if: runner.os == 'macOS'
        uses: thedoctor0/zip-release@master
        with:
          type: 'zip'
          filename: MacRecoveryX-${{github.ref_name}}-macos.zip
          directory: phimtor_app/build/macos/Build/Products/Release/

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: phimtor_app_${{ env.VERSION }}_${{ runner.os }}
          path: |
            ${{github.workspace}}/phimtor_app/build/*.AppImage
            ${{github.workspace}}\phimtor_app\build\*.exe 
            ${{github.workspace}}/phimtor_app/build/macos/Build/Products/Release/*.zip
            ${{github.workspace}}\phimtor_app\build\windows\x64\runner\Release\*.zip
          
